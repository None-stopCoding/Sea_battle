{"version":3,"sources":["components/App/App.js","Config.js","components/Field/Field.js","utils/GenerateShip.js","utils/GenerateSafeArea.js","utils/AI.js","utils/InitialField.js","utils/CreateCopy.js","utils/ConfigureField.js","utils/CreateEmpty.js","utils/Point.js","utils/ConvertUnix.js","utils/convertTime.js","components/Game/Game.js","components/Timer/Timer.js","components/Enter/Enter.js","components/Chat/Chat.js","components/Input/Input.js","components/Message/Message.js","components/Ships/Ships.js","components/Modal/Modal.js","components/Record/Record.js","index.js"],"names":["App","logout","userName","useState","show","toggle","showModal","e","prev","className","src","alt","onClick","onClose","name","config","fieldSize","ships","battleship","size","amount","units","destroyed","cruiser","destroyer","boat","safeValue","timeAIIsWaiting","timerStart","defaultHeaders","timeLoadChatMessages","timeLoadRecords","Field","field","mode","playFor","handleClick","map","row","rowIndex","key","cell","index","value","idName","parseInt","Math","abs","getClassAndId","id","locateShip","head","coords","directions","y","x","tryDirection","futureShip","offset","shipCells","iter","push","every","forEach","Point","randomDirection","_","random","length","splice","generateShip","empty","createListOfEmptyCells","point","generateSafeArea","renderedField","toString","safe","sides","rowOffset","cellOffset","String","AI","points","ship","startPoint","endPoint","choice","checkCanVisit","getMovedEndPoint","invert","diffRow","diffCell","searchEndPoint","tail","tailRow","tailCell","availableDirs","filter","dir","movedEndPoint","tryIndex","findIndex","tryDir","headRow","headCell","searchStartPoint","copy","newEndPoint","rowAI","cellAI","initialField","Array","fill","object","result","arr","Object","JSON","parse","stringify","configureField","val","flat","floor","this","convertUnix","unixTimestamp","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","convertTime","time","padStart","setShips","newField","fromEntries","entries","params","times","checkShipDestroyed","destroyedShip","shipType","destroyedIndex","unit","Game","gameID","setGameID","changeMode","refresh","setRefresh","guessField","setGuess","AIField","setAIField","AIShips","setAIShips","playerField","setPlayerField","playerShips","setPlayerShips","AIMemory","memorize","AIIsThinking","think","status","person","hasWon","setVictory","play","timer","useEffect","newAIField","newPlayerField","alert","sendGameResult","score","fetch","method","headers","body","then","res","Error","statusText","console","log","catch","handleFieldClick","copyAIField","type","copyAIShips","checkVictory","copyPlayerField","copyGuessField","copyMemo","victory","rerender","createThought","needRerender","Promise","resolve","reject","setTimeout","makeAIMove","promise","rest","copyPlayerShips","finished","isWinner","competitor","fleet","player","action","game","json","data","Timer","update","interval","change","setHours","setMinutes","setSeconds","setInterval","clearInterval","modal","document","getElementById","window","onclick","event","target","style","display","EnterPage","logIn","setName","onSubmit","preventDefault","title","htmlFor","fontSize","placeholder","autoComplete","onChange","required","Chat","state","messages","color","onSendMessage","text","loadMessages","setState","message","user","isMine","content","getElementsByClassName","scrollTop","scrollHeight","Component","Input","props","Message","m","renderMessage","messageFromMe","backgroundColor","Ships","justifyContent","unitIndex","width","Modal","children","Record","records","start","loadRecords","record","parseTime","render","enter"],"mappings":"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","file":"static/js/main.b934d157.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Game, Chat, Modal, Record } from './../Routing';\r\n\r\n\r\nconst App = ({ logout, userName }) => {\r\n    const [show, toggle] = useState(false);\r\n\r\n    const showModal = (e) => {\r\n        toggle(prev => !prev);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\" >\r\n            <div className=\"control_buttons\">\r\n                <img className=\"button__left_control\" src=\"./img/logout.png\" alt=\"logout\"\r\n                     onClick={() => logout()}/>\r\n                <img className=\"button__left_control\" src=\"./img/records.png\" alt=\"records\"\r\n                     onClick={(e) => showModal()}/>\r\n            </div>\r\n            <Modal show={show} onClose={showModal}>\r\n                <Record />\r\n            </Modal>\r\n            <Game name={userName}/>\r\n            <Chat name={userName}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n    fieldSize: 10,\r\n    ships: {\r\n        battleship: {\r\n            size: 4,\r\n            amount: 1,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        cruiser: {\r\n            size: 3,\r\n            amount: 2,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        destroyer: {\r\n            size: 2,\r\n            amount: 3,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        boat: {\r\n            size: 1,\r\n            amount: 4,\r\n            units: [],\r\n            destroyed: []\r\n        }\r\n    },\r\n    safeValue: 5,\r\n    timeAIIsWaiting: 500,\r\n    timerStart: 30,\r\n    defaultHeaders: {\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    },\r\n    timeLoadChatMessages: 1000,\r\n    timeLoadRecords: 1000\r\n};","import React from 'react';\r\nimport './Field.css';\r\nimport {config} from \"../../Config\";\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @param field\r\n * @param mode\r\n * @param playFor\r\n * @param handleClick\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Field = ({ field, mode, playFor, handleClick }) => {\r\n\r\n    const getClassAndId = (value) => {\r\n        let className = 'cell',\r\n            idName = 'empty';\r\n\r\n        if (parseInt(value) === (-1) * config.safeValue) {\r\n            idName = 'missed';\r\n        }\r\n        else if (parseInt(value) < 0) {\r\n            idName = 'killed';\r\n        }\r\n\r\n        if (mode === 'prepare') {\r\n            className += ' big_cell';\r\n        }\r\n        if (typeof value === 'string') {\r\n            className += ' safe';\r\n        } else {\r\n            if ((mode === 'play' && playFor === 'AI') ||\r\n                (mode === 'prepare' && playFor === 'player')) {\r\n\r\n                if (!value || Math.abs(value) === config.safeValue) {\r\n                    className += ' empty';\r\n                }\r\n            } else {\r\n                if (idName !== 'killed') {\r\n                    className += ' empty';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            idName: idName,\r\n            className: className\r\n        };\r\n    };\r\n\r\n    return(\r\n        <div className=\"field\">\r\n            {\r\n                field.map((row, rowIndex) =>\r\n                    <div className=\"row\" key={rowIndex}>\r\n                        {\r\n                            row.map((cell, index) => {\r\n                                const { idName, className } = getClassAndId(cell);\r\n                                return (\r\n                                    <div className={className}\r\n                                         onClick={() => handleClick(rowIndex, index, playFor)}\r\n                                         key={index}>\r\n\r\n                                        <div id={idName}>\r\n                                            {idName === 'killed' && <img src=\"./img/fire.png\" alt=\"killed\"/>}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Field;","import { config } from \"../Config\";\r\nimport { generateSafeArea, createListOfEmptyCells, Point } from \"./Routing\";\r\nimport _ from \"underscore\";\r\n\r\n/**\r\n * По созданным конфигам (directions) для каждого направления\r\n *  выбираем случайное и пытаемся посторить корабль\r\n *  если не выходит вычеркиваем его из списка доступных напрвлений\r\n * Как только все направления были перебраны и корабль не удалось построить\r\n *  выозвращаем coords с одной точкой - вершина начала корабля - сигнал неудачи для кораблей длиннее лодки\r\n * @param head\r\n * @param field\r\n * @param size\r\n * @returns {[*]}\r\n */\r\nconst locateShip = (head, field, size) => {\r\n    let coords = [head];            // список координат клеток корабля\r\n\r\n    const directions = [\r\n        { 'futureShip': head.y - size, 'offset': { 'y': -1, 'x': 0 } },     // вверх\r\n        { 'futureShip': head.x + size, 'offset': { 'y': 0, 'x': 1 } },      // вправо\r\n        { 'futureShip': head.y + size, 'offset': { 'y': 1, 'x': 0 } },      // вниз\r\n        { 'futureShip': head.x - size, 'offset': { 'y': 0, 'x': -1 } }      // влево\r\n    ];\r\n\r\n    const tryDirection = ({ futureShip, offset }) => {\r\n        if (0 <= futureShip && futureShip < config.fieldSize) {\r\n            let shipCells = [];\r\n            let iter = size;\r\n\r\n            while(iter) {\r\n                shipCells.push(field[head.y + iter * offset.y][head.x + iter * offset.x]);\r\n                iter--;\r\n            }\r\n\r\n            if (shipCells.every(cell => !cell)) {\r\n                shipCells.forEach((cell, index) =>\r\n                    coords.push(\r\n                        new Point(head.y + (index + 1) * offset.y,\r\n                            head.x + (index + 1) * offset.x)\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    };\r\n\r\n    // нет смысла выбирать направление для корабля длиной в одну клетку\r\n    if (size) {\r\n        do {\r\n            const randomDirection = _.random(directions.length - 1);\r\n            tryDirection(directions[randomDirection]);\r\n            if (coords.length === 1) {\r\n                directions.splice(randomDirection, 1);\r\n            }\r\n\r\n        } while(coords.length === 1 && directions.length);\r\n    }\r\n    return coords;\r\n};\r\n\r\n/**\r\n * Генерируем корабль\r\n *  - получаем все клетки куда можно поставить корбаль (его первую вершину)\r\n *  - выбираем из доступных случайную клетку\r\n *  - для этой клетки выбираем из доступных направление для корабля\r\n *  - если для выбранной клетки ни в каком из направлений невозможно поставить\r\n *      корабль, то выбираем другую клетку (случайно)\r\n * @param field\r\n * @param size\r\n * @returns {{renderedField: *, coords: *}}\r\n */\r\nconst generateShip = (field, size) => {\r\n    const empty = createListOfEmptyCells(field);\r\n    let coords = [];\r\n\r\n    do {\r\n        // выбираем из списка пустых клеток случаную\r\n        const point = empty[_.random(empty.length - 1)];\r\n        // выбираем направление корабля и получаем его координаты (или коор-ту первой вершины)\r\n        // size - 1 - так как первая вершина уже выбрана\r\n        coords = locateShip(point, field, size - 1);\r\n    } while(coords.length !== size);\r\n\r\n    // ставим корабль на поле\r\n    coords.forEach(cell => field[cell.y][cell.x] = size);\r\n    // строим зону \"неприкосновенности\" вокруг корабля\r\n    generateSafeArea(field, coords);\r\n    return {\r\n        coords: coords,\r\n        renderedField: field\r\n    };\r\n};\r\n\r\nexport default generateShip;","import { config } from \"../Config\";\r\n\r\n/**\r\n * Грубо говоря пробегаемся по каждой клетке корабля и смотрим\r\n *  во все 8 условий (4 угла 4 стороны)\r\n * @param field\r\n * @param coords\r\n * @param toString\r\n */\r\nconst generateSafeArea = (field, coords, toString = false) => {\r\n    const safe = config.safeValue,\r\n        size = config.fieldSize,\r\n        sides = [-1, 0, 1];\r\n\r\n    coords.forEach(point => {\r\n        sides.forEach(rowOffset => {\r\n            const row = point.y + rowOffset;\r\n            sides.forEach(cellOffset => {\r\n                const cell = point.x + cellOffset;\r\n                if (0 <= row && row < size &&\r\n                    0 <= cell && cell < size &&\r\n                    (toString ? Math.abs(field[row][cell]) === config.safeValue || !field[row][cell] : !field[row][cell])) {\r\n\r\n                    field[row][cell] = toString ? String(field[row][cell]) : safe;\r\n                }\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport default generateSafeArea;","import _ from 'underscore';\r\nimport {config} from './../Config';\r\nimport {copy, createListOfEmptyCells} from \"./Routing\";\r\n\r\nconst AI = (field, destroyed, points) => {\r\n    const { startPoint, endPoint } = points.ship || {startPoint: null, endPoint: null};\r\n    const choice = { row: null, cell: null },\r\n        ship = {\r\n            startPoint: null,\r\n            endPoint: null\r\n        };\r\n\r\n    const searchStartPoint = () => {\r\n        let random = {},\r\n            value = 0;\r\n        const empty = createListOfEmptyCells(field);\r\n\r\n        do {\r\n            random = empty[_.random(empty.length - 1)];\r\n            value = +field[random.y][random.x];\r\n        } while (value < 0 || value === 5 || field[random.y][random.x] === \"0\");\r\n\r\n        return {\r\n            headRow: random.y,\r\n            headCell: random.x\r\n        }\r\n    };\r\n\r\n    const checkCanVisit = (row, cell) =>\r\n        0 <= row && row < config.fieldSize &&\r\n        0 <= cell && cell < config.fieldSize;\r\n\r\n    const getMovedEndPoint = (point, invert = false) => {\r\n        const diffRow = endPoint.row - startPoint.row,\r\n            diffCell = endPoint.cell - startPoint.cell,\r\n            index = invert ? (-1) : 1;\r\n        return {\r\n            row: !diffRow ? point.row : point.row + index * (diffRow / Math.abs(diffRow)),\r\n            cell: !diffCell ? point.cell : point.cell + index * (diffCell / Math.abs(diffCell))\r\n        };\r\n    };\r\n\r\n    const searchEndPoint = () => {\r\n        const tail = {\r\n            tailRow: null,\r\n            tailCell: null\r\n        };\r\n\r\n        // if (missedShot) {\r\n        const directions = [\r\n            { offset: { row: -1, cell: 0 } },     // вверх\r\n            { offset: { row: 0, cell: 1 } },      // вправо\r\n            { offset: { row: 1, cell: 0 } },      // вниз\r\n            { offset: { row: 0, cell: -1 } }      // влево\r\n        ];\r\n        const availableDirs = directions.filter(dir =>\r\n            checkCanVisit(startPoint.row + dir.offset.row, startPoint.cell + dir.offset.cell) &&\r\n                    !field[startPoint.row + dir.offset.row][startPoint.cell + dir.offset.cell]);\r\n        if ((startPoint.row - endPoint.row) && (startPoint.cell - endPoint.cell)) {\r\n            const movedEndPoint = getMovedEndPoint(startPoint);\r\n            const tryIndex =\r\n                availableDirs.findIndex(dir =>\r\n                    dir.offset.row === movedEndPoint.row - startPoint.row &&\r\n                    dir.offset.cell === movedEndPoint.cell - startPoint.cell);\r\n            if (tryIndex !== -1) {\r\n                tail.tailRow = startPoint.row + availableDirs[tryIndex].offset.row;\r\n                tail.tailCell = startPoint.cell + availableDirs[tryIndex].offset.cell;\r\n            }\r\n        }\r\n\r\n        if (tail.tailCell === null) {\r\n            const tryDir = availableDirs[_.random(availableDirs.length - 1)].offset;\r\n            tail.tailRow = startPoint.row + tryDir.row;\r\n            tail.tailCell = startPoint.cell + tryDir.cell;\r\n        }\r\n        return tail;\r\n    };\r\n\r\n    if (!startPoint ||\r\n            field[startPoint.row][startPoint.cell] === (-1) * config.safeValue ||\r\n            destroyed) {\r\n        const { headRow, headCell } = searchStartPoint();\r\n        choice.row = headRow;\r\n        choice.cell = headCell;\r\n        ship.startPoint = copy(choice);\r\n        ship.endPoint = copy(choice);\r\n    } else if (!endPoint ||\r\n            (startPoint.row === endPoint.row && startPoint.cell === endPoint.cell) ||\r\n            field[endPoint.row][endPoint.cell] === (-1) * config.safeValue) {\r\n        const { tailRow, tailCell } = searchEndPoint();\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    } else {\r\n        const movedEndPoint = getMovedEndPoint(endPoint);\r\n        let tailRow = movedEndPoint.row,\r\n            tailCell = movedEndPoint.cell;\r\n\r\n        if (!(checkCanVisit(tailRow, tailCell) && Math.abs(+field[tailRow][tailCell]) !== config.safeValue)) {\r\n            const newEndPoint = searchEndPoint();\r\n            tailRow = newEndPoint.tailRow;\r\n            tailCell = newEndPoint.tailCell;\r\n        }\r\n\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    }\r\n\r\n    return {\r\n        rowAI: choice.row,\r\n        cellAI: choice.cell,\r\n        ship: ship\r\n    }\r\n};\r\n\r\nexport default AI;","import {config} from \"../Config\";\r\n\r\n/**\r\n * Двумерный массив (квадрат), заданного размера, заполненный нулями\r\n * @type {any[]}\r\n */\r\nconst initialField = (new Array(config.fieldSize)).fill(\r\n    (new Array(config.fieldSize)).fill(0)\r\n);\r\n\r\nexport default initialField;","const copy = object => {\r\n    let result = {};\r\n    if (object instanceof Array) {\r\n        result = object.map(arr => [...arr]);\r\n    } else if (object instanceof Object) {\r\n        result = JSON.parse(JSON.stringify(object));\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default copy;","import {config} from \"../Config\";\r\n\r\nconst configureField = (field, row, cell) => {\r\n    const val = (-1) * (!+field[row][cell] ? config.safeValue : +field[row][cell]);\r\n    field[row][cell] = typeof field[row][cell] === 'string' ? String(val) : val;\r\n    return field[row][cell];\r\n};\r\n\r\nexport default configureField;","import { config } from \"../Config\";\r\nimport { Point } from \"./Routing\";\r\n\r\n/**\r\n * Отдает список разрешенных клеток (с координатами), те, что пустые\r\n * @param field\r\n * @returns {[]}\r\n */\r\nconst createListOfEmptyCells = (field) =>\r\n    field.flat().map((cell, index) => {\r\n        if (!cell) {\r\n            return new Point(Math.floor(index / config.fieldSize), index % config.fieldSize);\r\n        }\r\n    }).filter(cell => cell instanceof Point);\r\n\r\nexport default createListOfEmptyCells;","/**\r\n * Конкструктор объекта точки с координатами\r\n * @param row\r\n * @param cell\r\n * @constructor\r\n */\r\nfunction Point(row, cell) {\r\n    this.x = cell;\r\n    this.y = row;\r\n}\r\n\r\nexport default Point;","/**\r\n * Конвертация врменной метки в отформатированый вывод даты\r\n * @param unixTimestamp\r\n * @returns {string}\r\n */\r\nconst convertUnix = unixTimestamp => {\r\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    let date = new Date(unixTimestamp);\r\n    let year = date.getFullYear();\r\n    let month = months_arr[date.getMonth()];\r\n    let day = date.getDate();\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n    let seconds = \"0\" + date.getSeconds();\r\n    return month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n};\r\n\r\nexport default convertUnix;","const convertTime = (time) => {\r\n    let hours = 0, minutes = 0, seconds = 0;\r\n\r\n    hours = Math.floor(time / 3600);\r\n    minutes = Math.floor((time - hours * 3600) / 60);\r\n    seconds = time - (hours * 3600 + minutes * 60);\r\n\r\n    return {\r\n        hours: String(hours).padStart(2, \"0\"),\r\n        minutes: String(minutes).padStart(2, \"0\"),\r\n        seconds: String(seconds).padStart(2, \"0\")\r\n    }\r\n};\r\n\r\nexport default convertTime;","import React, {useEffect, useState} from 'react';\r\nimport _ from 'underscore';\r\nimport './Game.css';\r\nimport { Field, Timer, Ships } from './../Routing';\r\nimport { initialField, AI, generateShip,\r\n         copy, generateSafeArea, configureField } from \"../../utils/Routing\";\r\nimport {config} from \"../../Config\";\r\n\r\nconst setShips = (newField) =>\r\n    Object.fromEntries(\r\n        Object.entries(copy(config.ships))\r\n            .map(([ship, params]) => {\r\n                _.times(params.amount, () => {\r\n                    const { coords, renderedField } = generateShip(newField, params.size);\r\n\r\n                    params.units.push(coords);\r\n                    newField = renderedField;\r\n                });\r\n\r\n                params.destroyed = (new Array(params.amount)).fill(0);\r\n                return [ship, params];\r\n            })\r\n    );\r\n\r\nconst isWinner = (field) =>\r\n    !field.filter(row =>\r\n        !!row.filter(cell =>\r\n            +cell > 0 && +cell !== config.safeValue).length\r\n    ).length;\r\n\r\nconst checkShipDestroyed = (ships, row, cell) => {\r\n    let destroyedShip = null,\r\n        shipType = null,\r\n        destroyedIndex = null;\r\n    Object.entries(ships).forEach(([ship, params]) => {\r\n        const index = params.units.findIndex(unit =>\r\n            !!unit.filter(point =>\r\n                point.y === row && point.x === cell).length\r\n        );\r\n\r\n        if (index !== -1) {\r\n            if (++params.destroyed[index] === params.size) {\r\n                destroyedShip = params.units[index];\r\n                shipType = ship;\r\n                destroyedIndex = index;\r\n                // TODO проверить для бота\r\n            }\r\n        }\r\n    });\r\n    return {\r\n        destroyedShip: destroyedShip,\r\n        shipType: shipType,\r\n        destroyedIndex: destroyedIndex\r\n    }\r\n};\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Game = ({ name }) => {\r\n    const [gameID, setGameID] = useState('');\r\n    const [mode, changeMode] = useState('prepare');\r\n    const [refresh, setRefresh] = useState('false');\r\n    const [guessField, setGuess] = useState(copy(initialField));\r\n    const [AIField, setAIField] = useState(copy(initialField));\r\n    const [AIShips, setAIShips] = useState(copy(config.ships));\r\n    const [playerField, setPlayerField] = useState(copy(initialField));\r\n    const [playerShips, setPlayerShips] = useState(copy(config.ships));\r\n    const [AIMemory, memorize] = useState({});\r\n    const [AIIsThinking, think] = useState(false);\r\n    const [hasWon, setVictory] = useState({\r\n        status: false,\r\n        person: ''\r\n    });\r\n    const [play, timer] = useState(true);\r\n    // const [stopTime, changeStopTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (mode === 'prepare' || refresh) {\r\n            let newAIField = copy(initialField),\r\n                newPlayerField = copy(initialField);\r\n\r\n            setAIShips(setShips(newAIField));\r\n            setAIField(newAIField);\r\n\r\n            setPlayerShips(setShips(newPlayerField));\r\n            setPlayerField(newPlayerField);\r\n\r\n            setGuess(copy(initialField));\r\n            memorize({});\r\n            setRefresh(false);\r\n        }\r\n    }, [mode, refresh]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon.status) {\r\n            if (hasWon.person === 'person') {\r\n                alert('Поздравляем! Вы победили!');\r\n            } else {\r\n                alert('Это поражение...Увы :(');\r\n            }\r\n\r\n            changeMode('prepare');\r\n            timer(false);\r\n            setVictory({\r\n                status: false,\r\n                person: ''\r\n            });\r\n            sendGameResult();\r\n        }\r\n    });\r\n\r\n    const sendGameResult = () => {\r\n        if (!gameID) {\r\n            console.log('Game ID не задан')\r\n        } else {\r\n            const score = AIField.flat().filter(cell =>\r\n                +cell < 0 && +cell !== (-1) * config.safeValue).length;\r\n\r\n            fetch(`/api/records/${gameID}`, {\r\n                method: 'PATCH',\r\n                headers: { ...config.defaultHeaders },\r\n                body: JSON.stringify({score: score})\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    console.log(`Sent score data successfully`);\r\n                } else {\r\n                    throw new Error(res.statusText);\r\n                }\r\n            }).catch(e => console.log(e));\r\n        }\r\n    };\r\n    \r\n    function handleFieldClick(row, cell, playFor)\r\n    {\r\n        if (mode === 'play' && playFor === 'player' && AIField[row][cell] >= 0 && !AIIsThinking && play) {\r\n            let copyAIField = copy(AIField);\r\n\r\n            configureField(copyAIField, row, cell);\r\n            if (+copyAIField[row][cell] !== (-1) * config.safeValue) {\r\n                const { destroyedShip: ship,\r\n                        shipType: type,\r\n                        destroyedIndex: index } = checkShipDestroyed(AIShips, row, cell);\r\n                if (ship) {\r\n                    const copyAIShips = copy(AIShips);\r\n                    copyAIShips[type].units.splice(index, 1);\r\n                    setAIShips(copyAIShips);\r\n\r\n                    generateSafeArea(copyAIField, ship, true);\r\n                    checkVictory('person', copyAIField);\r\n                }\r\n                setAIField(copyAIField);\r\n            } else {\r\n                setAIField(copyAIField);\r\n                let copyPlayerField = copy(playerField);\r\n                let copyGuessField = copy(guessField);\r\n                let copyMemo = AIMemory;\r\n                let value = 0,\r\n                    destroyedShip = false,\r\n                    victory = false;\r\n\r\n                const rerender = () => {\r\n                    setGuess(copyGuessField);\r\n                    setPlayerField(copyPlayerField);\r\n                    memorize(copyMemo);\r\n                };\r\n\r\n                const createThought = (needRerender = false) =>\r\n                    new Promise((resolve, reject) => {\r\n                        if (+value !== (-1) * config.safeValue && !victory) {\r\n                            if (needRerender) rerender();\r\n                            think(true);\r\n                            setTimeout(() => {\r\n                                think(false);\r\n                                resolve(AI(copy(copyGuessField), destroyedShip, copyMemo));\r\n                            }, config.timeAIIsWaiting);\r\n                        } else {\r\n                            reject('finished');\r\n                        }\r\n                    });\r\n\r\n                const makeAIMove = promise => {\r\n                    promise.then(result => {\r\n                        const { rowAI, cellAI, ...rest } = result;\r\n                        destroyedShip = false;\r\n                        copyMemo = rest;\r\n                        copyGuessField[rowAI][cellAI] = value = configureField(copyPlayerField, rowAI, cellAI);\r\n                        const { destroyedShip: ship,\r\n                                shipType: type,\r\n                                destroyedIndex: index } = checkShipDestroyed(playerShips, rowAI, cellAI);\r\n                        if (ship) {\r\n                            destroyedShip = true;\r\n                            const copyPlayerShips = copy(playerShips);\r\n                            copyPlayerShips[type].units.splice(index, 1);\r\n                            setPlayerShips(copyPlayerShips);\r\n\r\n                            generateSafeArea(copyPlayerField, ship, true);\r\n                            generateSafeArea(copyGuessField, ship, true);\r\n                            victory = checkVictory('AI', copyPlayerField);\r\n                        }\r\n                        makeAIMove(createThought(true));\r\n                    }, finished => {\r\n                        rerender();\r\n                    });\r\n                };\r\n\r\n                makeAIMove(createThought());\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkVictory = (person, field) => {\r\n        if (isWinner(field)) {\r\n            let competitor = 'person';\r\n            if (person === 'AI') {\r\n                competitor = 'AI';\r\n            }\r\n            setVictory({\r\n                status: true,\r\n                person: competitor\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handlePlayRestart = () => {\r\n        if (mode === 'prepare') {\r\n            changeMode('play');\r\n            timer(true);\r\n            fetch('/api/records', {\r\n                method: 'POST',\r\n                headers: { ...config.defaultHeaders },\r\n                body: JSON.stringify({ game: \"Морской бой\" })\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    console.log('Successfully notify server about game start');\r\n                    return res.json();\r\n                } else {\r\n                    throw new Error(res.statusText);\r\n                }\r\n            }).then(data => {\r\n                setGameID(data.id);\r\n            }).catch(e => console.log(e));\r\n        } else {\r\n            timer(false);\r\n            changeMode('prepare');\r\n            sendGameResult();\r\n        }\r\n    };\r\n\r\n    // const handleStopTimer = (value) => changeStopTime(value);\r\n\r\n    return (\r\n        <div id=\"game\">\r\n            {\r\n                mode === 'play' &&\r\n                <div className=\"game_header\">\r\n                    <Ships fleet={playerShips} name=\"Smart\" player=\"AI\"/>\r\n                    <Timer action={play}/>\r\n                    <Ships fleet={AIShips} name={name} player=\"user\"/>\r\n                </div>\r\n            }\r\n            <div id=\"fields\">\r\n                <Field playFor={mode === 'prepare' ? 'player' : 'AI'}\r\n                       field={playerField}\r\n                       mode={mode}\r\n                       handleClick={handleFieldClick}/>\r\n                {\r\n                    mode === 'play' &&\r\n                    <Field playFor={'player'}\r\n                           field={AIField}\r\n                           mode={mode}\r\n                           handleClick={handleFieldClick}/>\r\n                }\r\n            </div>\r\n            <div className=\"button_group\">\r\n                <img className=\"but__down\" src={`./img/${mode === 'prepare' ? 'power-button' : 'refresh'}.png`} alt=\"control\"\r\n                     onClick={() => handlePlayRestart()}/>\r\n                {\r\n                    mode === 'prepare' ? (\r\n                        <img className=\"but__down\" src={`./img/loop.png`} alt=\"refresh\"\r\n                             onClick={() => setRefresh(true)}/>\r\n                    ) : (\r\n                        <img className=\"but__down\" src={`./img/${play ? \"pause\" : \"play\"}.png`} alt=\"timer\"\r\n                             onClick={() => {\r\n                                 if (play) {\r\n                                     sendGameResult();\r\n                                 }\r\n                                 timer(play => !play);\r\n                             }}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport {convertTime} from \"../../utils/Routing\";\r\n\r\nconst Timer = ({ action }) => {\r\n    const [time, update] = useState(0);\r\n    const [interval, change] = useState(null);\r\n    const [hours, setHours] = useState(null);\r\n    const [minutes, setMinutes] = useState(null);\r\n    const [seconds, setSeconds] = useState(null);\r\n\r\n    const start = () =>\r\n        change(setInterval(() => {\r\n            update(prev => prev + 1)\r\n        }, 1000));\r\n\r\n    const stop = () => clearInterval(interval);\r\n\r\n    useEffect(() => action ? start() : stop(), [action]);\r\n\r\n    // useEffect(() => changeStopTime(time));\r\n\r\n    useEffect(() => {\r\n        const { hours, minutes, seconds } = convertTime(time);\r\n\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setSeconds(seconds);\r\n    }, [time]);\r\n\r\n    return(\r\n        <div id='timer'>\r\n            <strong>{hours} : {minutes} : {seconds}</strong>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport './Enter.css';\r\nimport {config} from \"../../Config\";\r\n\r\n/* Модальное окно */\r\nconst modal = document.getElementById('id01');\r\nwindow.onclick = function(event) {\r\n    if (event.target === modal) {\r\n        modal.style.display = \"none\";\r\n    }\r\n};\r\n\r\nconst EnterPage = ({ logIn }) => {\r\n    const [userName, setName] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // fetch('/api/users',{\r\n        //     method:'POST',\r\n        //     headers:{ ...config.defaultHeaders },\r\n        //     body: JSON.stringify({name: userName})\r\n        // }).then(res => {\r\n        //     if (res.status === 200) {\r\n        //         console.log(`login for ${userName} is successful`);\r\n                logIn(userName);\r\n        // } else if (res.status === 400) {\r\n        //     throw new Error(\"Польователь с таким именем уже существует\")\r\n        // } else {\r\n        //     throw new Error(res.statusText);\r\n        // }\r\n        // }).catch(e => alert(e));\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => document.getElementById('id01').style.display='block'}\r\n                    className=\"ENT\">Играть &laquo;Морской Бой&raquo;</button>\r\n\r\n            <div id=\"id01\" className=\"modal\">\r\n                <form className=\"modal-content animate\" onSubmit={handleSubmit}>\r\n                    <div className=\"imgcontainer\">\r\n                        <span onClick={ () => document.getElementById('id01').style.display='none'}\r\n                              className=\"close\" title=\"Close Modal\">×</span>\r\n                        <img src=\"https://thumbs.gfycat.com/FrankFreeAmericankestrel-size_restricted.gif\"\r\n                             alt=\"Avatar\" className=\"avatar\" />\r\n                    </div>\r\n\r\n                    <div className=\"container\">\r\n                        <label htmlFor=\"uname\" style={{fontSize: \"2vh\"}}><b>Привет, я Smart, а ты...</b></label><br /><br />\r\n                        <input className='form-row' type=\"text\" placeholder=\"Введите имя\" name=\"uname\"\r\n                               autoComplete=\"off\" value={userName} onChange={e => setName(e.target.value)} required /><br /><br />\r\n                        <button type=\"submit\" className=\"button1\">ИГРАТЬ</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EnterPage;","import React, { Component } from 'react';\r\nimport {config} from \"../../Config\";\r\nimport _ from 'underscore';\r\nimport './Chat.css';\r\nimport { Input, Messages } from \"./../Routing\";\r\n\r\nfunction randomColor() {\r\n    return \"rgba(\" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", 0.65)\";\r\n}\r\n\r\nclass Chat extends Component {\r\n    state = {\r\n        messages: [],\r\n        interval: null,\r\n        color: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            interval: setInterval(() => this.loadMessages(), config.timeLoadChatMessages),\r\n            color: randomColor()\r\n        })\r\n    }\r\n\r\n    loadMessages() {\r\n        const messages = [];\r\n        fetch('/api/messages', {\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log('Successfully loaded messages');\r\n                return res.json();\r\n            } else {\r\n                throw new Error(res.statusText);\r\n            }\r\n        }).then(data => {\r\n            data.forEach(message => {\r\n                const { user, game, text, time, isMine } = message;\r\n                messages.push({\r\n                    name: user,\r\n                    text: text,\r\n                    isMine: isMine,\r\n                    game: game,\r\n                    time: time\r\n                });\r\n            });\r\n            const content = document.getElementsByClassName('Message-content');\r\n            content.scrollTop = content.scrollHeight;\r\n            this.setState({messages: messages});\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.interval);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Chat\">\r\n                <div className=\"Chat-header\">\r\n                    <h1>Общий чат</h1>\r\n                </div>\r\n                <Messages\r\n                    messages={this.state.messages}\r\n                    color={this.state.color}\r\n                />\r\n                <Input\r\n                    onSendMessage={this.onSendMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSendMessage = (text) => {\r\n        fetch('/api/messages', {\r\n            method: 'POST',\r\n            headers: { ...config.defaultHeaders },\r\n            body: JSON.stringify({text: text})\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log('Successfully sent message to server');\r\n                this.loadMessages();\r\n            } else {\r\n                throw new Error(res.statusText);\r\n            }\r\n        }).catch(e => console.log(e));\r\n    }\r\n}\r\n\r\nexport default Chat;","import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        text: \"\"\r\n    };\r\n\r\n    onChange(e) {\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onSendMessage(this.state.text);\r\n        this.setState({text:\"\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Input\">\r\n                <form onSubmit={e => this.onSubmit(e)} className=\"chat_form\">\r\n                    <input\r\n                        className=\"chat_input\"\r\n                        onChange={e => this.onChange(e)}\r\n                        value={this.state.text}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите сообщение\"\r\n                    />\r\n                    <button className=\"chat_button\">Отправить</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport {convertUnix} from \"../../utils/Routing\";\r\n\r\nclass Message extends Component {\r\n    render() {\r\n        const {messages} = this.props;\r\n        return (\r\n            <ul className=\"Messages-list\">\r\n                {messages.map(m => this.renderMessage(m))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    renderMessage(message) {\r\n        const {name, text, isMine, game, time} = message;\r\n        const messageFromMe = isMine;\r\n        const className = messageFromMe ?\r\n            \"Messages-message currentMember\" : \"Messages-message\";\r\n        return (\r\n            <li className={className}>\r\n                <div className=\"Message-content\">\r\n                    {\r\n                        !messageFromMe &&\r\n                        <div className=\"username\">\r\n                            <strong>\r\n                                {name}\r\n                                <span>{game && ' -> '}</span>\r\n                                {game}\r\n                            </strong>\r\n                        </div>\r\n                    }\r\n                    <div className=\"text\" style={{backgroundColor: this.props.color}}>{text}</div>\r\n                    <div className=\"time\">{convertUnix(time)}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './Ships.css';\r\n\r\nconst Ships = ({ fleet, name, player }) => {\r\n    const justifyContent = `${player === 'AI' ? 'flex-start' : 'flex-end'}`;\r\n    return (\r\n        <div className=\"info_ships\">\r\n            <div className=\"name\" style={{justifyContent: justifyContent}}>\r\n                {name}\r\n            </div>\r\n            <div className=\"ships\">\r\n                {\r\n                    Object.entries(fleet).map(([ship, params], index) =>\r\n                        <div className=\"ships__same_type\" key={index}\r\n                            style={{justifyContent: justifyContent}}>\r\n                            {\r\n                                params.units.map((unit, unitIndex) => {\r\n                                    return (\r\n                                        <div className=\"ships__unit\" key={unitIndex}\r\n                                             style={{width: `${unit.length * 15}px`}}>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Ships;","import React, { useEffect, useState } from \"react\";\r\nimport './Modal.css';\r\n\r\n\r\nconst Modal = ({ onClose, show, children }) => {\r\n    const handleOnClose = e => onClose && onClose(e);\r\n\r\n    if (!show) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal_records\" id=\"modal_rec\">\r\n            <h2> Топ игроков \"Морской бой\"</h2>\r\n            <div className=\"content_records\">\r\n                {children}\r\n            </div>\r\n            <div className=\"actions_records\">\r\n                <button className=\"toggle-button\" onClick={() => handleOnClose()}>\r\n                    Закрыть\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, {useEffect, useState} from \"react\";\r\nimport {config} from \"../../Config\";\r\nimport {convertTime} from \"../../utils/Routing\";\r\n\r\nconst Record = () => {\r\n    const [records, update] = useState([]);\r\n    const [interval, start] = useState(null);\r\n\r\n    useEffect(() => {\r\n        start(setInterval(() => loadRecords(), config.timeLoadRecords));\r\n    }, []);\r\n\r\n    const loadRecords = () => {\r\n        fetch('/api/records', {\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log('Successfully loaded records');\r\n                return res.json();\r\n            } else {\r\n                throw new Error(res.statusText);\r\n            }\r\n        }).then(data => {\r\n            update(data.filter(record => record.game === 'Морской бой'));\r\n        }).catch(e => console.log(e));\r\n    };\r\n\r\n    const parseTime = (time) => {\r\n        const { hours, minutes, seconds } = convertTime(time);\r\n        return `${hours} : ${minutes} : ${seconds}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                records.length ? (\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th className=\"record_header\">Игрок</th>\r\n                                <th className=\"record_header\">Очки</th>\r\n                                <th className=\"record_header\">Время</th>\r\n                            </tr>\r\n                            {\r\n                                records.map((record, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{record.user}</td>\r\n                                            <td>{record.score}</td>\r\n                                            <td>{parseTime(record.time)}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <p>Никто еще не решился попробовать свои силы.</p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Record;","import React, { useEffect, useState } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport { App, EnterPage } from './components/Routing';\r\nimport {config} from \"./Config\";\r\n\r\nconst Main = () => {\r\n    const [userName, enter] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch('/api/users', {\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                return res.json();\r\n            }\r\n            throw new Error(res.statusText);\r\n        }).then(data => {\r\n            console.log(data);\r\n            enter('blabla');\r\n        }).catch(e => console.log(`Ошибка: ${e.message}`));\r\n    }, []);\r\n\r\n    const logIn = (name) => {\r\n        enter(name);\r\n    };\r\n\r\n    const logout = () => {\r\n        fetch('/api/users', {\r\n            method: 'DELETE',\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log(`logout for ${userName} is successful`);\r\n                enter('');\r\n            } else {\r\n                throw new Error(res.statusText);\r\n            }\r\n        }).catch(e => alert(e));\r\n    };\r\n\r\n    return(\r\n        userName ? <App logout={logout} userName={userName}/> : <EnterPage logIn={logIn}/>\r\n    );\r\n};\r\n\r\nrender(\r\n    <Main />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}