{"version":3,"sources":["components/App/App.js","Config.js","components/Field/Field.js","utils/GenerateShip.js","utils/GenerateSafeArea.js","utils/AI.js","utils/InitialField.js","utils/CreateCopy.js","utils/ConfigureField.js","utils/CreateEmpty.js","utils/Point.js","components/Game/Game.js","components/Timer/Timer.js","components/Enter/Enter.js","components/Chat/Chat.js","components/Input/Input.js","components/Message/Message.js","index.js"],"names":["App","userName","id","name","config","fieldSize","ships","battleship","size","amount","units","destroyed","cruiser","destroyer","boat","safeValue","timeAIIsWaiting","timerStart","defaultHeaders","Field","field","mode","playFor","handleClick","className","map","row","rowIndex","key","cell","index","value","idName","parseInt","Math","abs","getClassAndId","onClick","src","alt","locateShip","head","coords","directions","y","x","tryDirection","futureShip","offset","shipCells","iter","push","every","forEach","Point","randomDirection","_","random","length","splice","generateShip","empty","createListOfEmptyCells","point","generateSafeArea","renderedField","toString","safe","sides","rowOffset","cellOffset","String","AI","points","ship","startPoint","endPoint","choice","checkCanVisit","getMovedEndPoint","invert","diffRow","diffCell","searchEndPoint","tail","tailRow","tailCell","availableDirs","filter","dir","movedEndPoint","tryIndex","findIndex","tryDir","headRow","headCell","searchStartPoint","copy","newEndPoint","rowAI","cellAI","initialField","Array","fill","object","result","arr","Object","JSON","parse","stringify","configureField","val","flat","floor","this","setShips","newField","fromEntries","entries","params","times","checkShipDestroyed","destroyedShip","unit","Game","useState","changeMode","refresh","setRefresh","guessField","setGuess","AIField","setAIField","AIShips","setAIShips","playerField","setPlayerField","playerShips","setPlayerShips","AIMemory","memorize","AIIsThinking","think","status","person","hasWon","setVictory","play","timer","changeStopTime","handleFieldClick","copyAIField","checkVictory","copyPlayerField","copyGuessField","copyMemo","victory","rerender","createThought","needRerender","Promise","resolve","reject","setTimeout","makeAIMove","promise","then","rest","finished","useEffect","newAIField","newPlayerField","alert","isWinner","competitor","action","Timer","time","update","interval","change","hours","setHours","minutes","setMinutes","seconds","setSeconds","setInterval","prev","clearInterval","padStart","modal","document","getElementById","window","onclick","event","target","style","display","EnterPage","logIn","setName","onSubmit","e","preventDefault","fetch","method","headers","body","res","Error","statusText","catch","message","title","htmlFor","fontSize","type","placeholder","autoComplete","onChange","required","Chat","state","messages","member","username","color","onSendMessage","text","setState","currentMember","Component","Input","props","Message","m","renderMessage","messageFromMe","backgroundColor","cookies","Cookies","render","enter","get","authToken","setToken","json","data","console","log","token"],"mappings":"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","file":"static/js/main.100e8ea1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Game, Chat } from './../Routing';\r\n\r\nconst App = ({ userName }) => {\r\n    return (\r\n        <div id=\"App\">\r\n            <Game name={userName}/>\r\n            <Chat />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n    fieldSize: 10,\r\n    ships: {\r\n        battleship: {\r\n            size: 4,\r\n            amount: 1,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        cruiser: {\r\n            size: 3,\r\n            amount: 2,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        destroyer: {\r\n            size: 2,\r\n            amount: 3,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        boat: {\r\n            size: 1,\r\n            amount: 4,\r\n            units: [],\r\n            destroyed: []\r\n        }\r\n    },\r\n    safeValue: 5,\r\n    timeAIIsWaiting: 500,\r\n    timerStart: 30,\r\n    defaultHeaders: {\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    }\r\n};","import React from 'react';\r\nimport './Field.css';\r\nimport {config} from \"../../Config\";\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @param field\r\n * @param mode\r\n * @param playFor\r\n * @param handleClick\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Field = ({ field, mode, playFor, handleClick }) => {\r\n\r\n    const getClassAndId = (value) => {\r\n        let className = 'cell',\r\n            idName = 'empty';\r\n\r\n        if (parseInt(value) === (-1) * config.safeValue) {\r\n            idName = 'missed';\r\n        }\r\n        else if (parseInt(value) < 0) {\r\n            idName = 'killed';\r\n        }\r\n\r\n        if (mode === 'prepare') {\r\n            className += ' big_cell';\r\n        }\r\n        if (typeof value === 'string') {\r\n            className += ' safe';\r\n        } else {\r\n            if ((mode === 'play' && playFor === 'AI') ||\r\n                (mode === 'prepare' && playFor === 'player')) {\r\n\r\n                if (!value || Math.abs(value) === config.safeValue) {\r\n                    className += ' empty';\r\n                }\r\n            } else {\r\n                if (idName !== 'killed') {\r\n                    className += ' empty';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            idName: idName,\r\n            className: className\r\n        };\r\n    };\r\n\r\n    return(\r\n        <div className=\"field\">\r\n            {\r\n                field.map((row, rowIndex) =>\r\n                    <div className=\"row\" key={rowIndex}>\r\n                        {\r\n                            row.map((cell, index) => {\r\n                                const { idName, className } = getClassAndId(cell);\r\n                                return (\r\n                                    <div className={className}\r\n                                         onClick={() => handleClick(rowIndex, index, playFor)}\r\n                                         key={index}>\r\n\r\n                                        <div id={idName}>\r\n                                            {idName === 'killed' && <img src=\"./img/fire.png\" alt=\"killed\"/>}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Field;","import { config } from \"../Config\";\r\nimport { generateSafeArea, createListOfEmptyCells, Point } from \"./Routing\";\r\nimport _ from \"underscore\";\r\n\r\n/**\r\n * По созданным конфигам (directions) для каждого направления\r\n *  выбираем случайное и пытаемся посторить корабль\r\n *  если не выходит вычеркиваем его из списка доступных напрвлений\r\n * Как только все направления были перебраны и корабль не удалось построить\r\n *  выозвращаем coords с одной точкой - вершина начала корабля - сигнал неудачи для кораблей длиннее лодки\r\n * @param head\r\n * @param field\r\n * @param size\r\n * @returns {[*]}\r\n */\r\nconst locateShip = (head, field, size) => {\r\n    let coords = [head];            // список координат клеток корабля\r\n\r\n    const directions = [\r\n        { 'futureShip': head.y - size, 'offset': { 'y': -1, 'x': 0 } },     // вверх\r\n        { 'futureShip': head.x + size, 'offset': { 'y': 0, 'x': 1 } },      // вправо\r\n        { 'futureShip': head.y + size, 'offset': { 'y': 1, 'x': 0 } },      // вниз\r\n        { 'futureShip': head.x - size, 'offset': { 'y': 0, 'x': -1 } }      // влево\r\n    ];\r\n\r\n    const tryDirection = ({ futureShip, offset }) => {\r\n        if (0 <= futureShip && futureShip < config.fieldSize) {\r\n            let shipCells = [];\r\n            let iter = size;\r\n\r\n            while(iter) {\r\n                shipCells.push(field[head.y + iter * offset.y][head.x + iter * offset.x]);\r\n                iter--;\r\n            }\r\n\r\n            if (shipCells.every(cell => !cell)) {\r\n                shipCells.forEach((cell, index) =>\r\n                    coords.push(\r\n                        new Point(head.y + (index + 1) * offset.y,\r\n                            head.x + (index + 1) * offset.x)\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    };\r\n\r\n    // нет смысла выбирать направление для корабля длиной в одну клетку\r\n    if (size) {\r\n        do {\r\n            const randomDirection = _.random(directions.length - 1);\r\n            tryDirection(directions[randomDirection]);\r\n            if (coords.length === 1) {\r\n                directions.splice(randomDirection, 1);\r\n            }\r\n\r\n        } while(coords.length === 1 && directions.length);\r\n    }\r\n    return coords;\r\n};\r\n\r\n/**\r\n * Генерируем корабль\r\n *  - получаем все клетки куда можно поставить корбаль (его первую вершину)\r\n *  - выбираем из доступных случайную клетку\r\n *  - для этой клетки выбираем из доступных направление для корабля\r\n *  - если для выбранной клетки ни в каком из направлений невозможно поставить\r\n *      корабль, то выбираем другую клетку (случайно)\r\n * @param field\r\n * @param size\r\n * @returns {{renderedField: *, coords: *}}\r\n */\r\nconst generateShip = (field, size) => {\r\n    const empty = createListOfEmptyCells(field);\r\n    let coords = [];\r\n\r\n    do {\r\n        // выбираем из списка пустых клеток случаную\r\n        const point = empty[_.random(empty.length - 1)];\r\n        // выбираем направление корабля и получаем его координаты (или коор-ту первой вершины)\r\n        // size - 1 - так как первая вершина уже выбрана\r\n        coords = locateShip(point, field, size - 1);\r\n    } while(coords.length !== size);\r\n\r\n    // ставим корабль на поле\r\n    coords.forEach(cell => field[cell.y][cell.x] = size);\r\n    // строим зону \"неприкосновенности\" вокруг корабля\r\n    generateSafeArea(field, coords);\r\n    return {\r\n        coords: coords,\r\n        renderedField: field\r\n    };\r\n};\r\n\r\nexport default generateShip;","import { config } from \"../Config\";\r\n\r\n/**\r\n * Грубо говоря пробегаемся по каждой клетке корабля и смотрим\r\n *  во все 8 условий (4 угла 4 стороны)\r\n * @param field\r\n * @param coords\r\n * @param toString\r\n */\r\nconst generateSafeArea = (field, coords, toString = false) => {\r\n    const safe = config.safeValue,\r\n        size = config.fieldSize,\r\n        sides = [-1, 0, 1];\r\n\r\n    coords.forEach(point => {\r\n        sides.forEach(rowOffset => {\r\n            const row = point.y + rowOffset;\r\n            sides.forEach(cellOffset => {\r\n                const cell = point.x + cellOffset;\r\n                if (0 <= row && row < size &&\r\n                    0 <= cell && cell < size &&\r\n                    (toString ? Math.abs(field[row][cell]) === config.safeValue || !field[row][cell] : !field[row][cell])) {\r\n\r\n                    field[row][cell] = toString ? String(field[row][cell]) : safe;\r\n                }\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport default generateSafeArea;","import _ from 'underscore';\r\nimport {config} from './../Config';\r\nimport {copy, createListOfEmptyCells} from \"./Routing\";\r\n\r\nconst AI = (field, destroyed, points) => {\r\n    const { startPoint, endPoint } = points.ship || {startPoint: null, endPoint: null};\r\n    const choice = { row: null, cell: null },\r\n        ship = {\r\n            startPoint: null,\r\n            endPoint: null\r\n        };\r\n\r\n    const searchStartPoint = () => {\r\n        let random = {},\r\n            value = 0;\r\n        const empty = createListOfEmptyCells(field);\r\n\r\n        do {\r\n            random = empty[_.random(empty.length - 1)];\r\n            value = +field[random.y][random.x];\r\n        } while (value < 0 || value === 5 || field[random.y][random.x] === \"0\");\r\n\r\n        return {\r\n            headRow: random.y,\r\n            headCell: random.x\r\n        }\r\n    };\r\n\r\n    const checkCanVisit = (row, cell) =>\r\n        0 <= row && row < config.fieldSize &&\r\n        0 <= cell && cell < config.fieldSize;\r\n\r\n    const getMovedEndPoint = (point, invert = false) => {\r\n        const diffRow = endPoint.row - startPoint.row,\r\n            diffCell = endPoint.cell - startPoint.cell,\r\n            index = invert ? (-1) : 1;\r\n        return {\r\n            row: !diffRow ? point.row : point.row + index * (diffRow / Math.abs(diffRow)),\r\n            cell: !diffCell ? point.cell : point.cell + index * (diffCell / Math.abs(diffCell))\r\n        };\r\n    };\r\n\r\n    const searchEndPoint = () => {\r\n        const tail = {\r\n            tailRow: null,\r\n            tailCell: null\r\n        };\r\n\r\n        // if (missedShot) {\r\n        const directions = [\r\n            { offset: { row: -1, cell: 0 } },     // вверх\r\n            { offset: { row: 0, cell: 1 } },      // вправо\r\n            { offset: { row: 1, cell: 0 } },      // вниз\r\n            { offset: { row: 0, cell: -1 } }      // влево\r\n        ];\r\n        const availableDirs = directions.filter(dir =>\r\n            checkCanVisit(startPoint.row + dir.offset.row, startPoint.cell + dir.offset.cell) &&\r\n                    !field[startPoint.row + dir.offset.row][startPoint.cell + dir.offset.cell]);\r\n        if ((startPoint.row - endPoint.row) && (startPoint.cell - endPoint.cell)) {\r\n            const movedEndPoint = getMovedEndPoint(startPoint);\r\n            const tryIndex =\r\n                availableDirs.findIndex(dir =>\r\n                    dir.offset.row === movedEndPoint.row - startPoint.row &&\r\n                    dir.offset.cell === movedEndPoint.cell - startPoint.cell);\r\n            if (tryIndex !== -1) {\r\n                tail.tailRow = startPoint.row + availableDirs[tryIndex].offset.row;\r\n                tail.tailCell = startPoint.cell + availableDirs[tryIndex].offset.cell;\r\n            }\r\n        }\r\n\r\n        if (tail.tailCell === null) {\r\n            const tryDir = availableDirs[_.random(availableDirs.length - 1)].offset;\r\n            tail.tailRow = startPoint.row + tryDir.row;\r\n            tail.tailCell = startPoint.cell + tryDir.cell;\r\n        }\r\n        return tail;\r\n    };\r\n\r\n    if (!startPoint ||\r\n            field[startPoint.row][startPoint.cell] === (-1) * config.safeValue ||\r\n            destroyed) {\r\n        const { headRow, headCell } = searchStartPoint();\r\n        choice.row = headRow;\r\n        choice.cell = headCell;\r\n        ship.startPoint = copy(choice);\r\n        ship.endPoint = copy(choice);\r\n    } else if (!endPoint ||\r\n            (startPoint.row === endPoint.row && startPoint.cell === endPoint.cell) ||\r\n            field[endPoint.row][endPoint.cell] === (-1) * config.safeValue) {\r\n        const { tailRow, tailCell } = searchEndPoint();\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    } else {\r\n        const movedEndPoint = getMovedEndPoint(endPoint);\r\n        let tailRow = movedEndPoint.row,\r\n            tailCell = movedEndPoint.cell;\r\n\r\n        if (!(checkCanVisit(tailRow, tailCell) && Math.abs(+field[tailRow][tailCell]) !== config.safeValue)) {\r\n            const newEndPoint = searchEndPoint();\r\n            tailRow = newEndPoint.tailRow;\r\n            tailCell = newEndPoint.tailCell;\r\n        }\r\n\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    }\r\n\r\n    return {\r\n        rowAI: choice.row,\r\n        cellAI: choice.cell,\r\n        ship: ship\r\n    }\r\n};\r\n\r\nexport default AI;","import {config} from \"../Config\";\r\n\r\n/**\r\n * Двумерный массив (квадрат), заданного размера, заполненный нулями\r\n * @type {any[]}\r\n */\r\nconst initialField = (new Array(config.fieldSize)).fill(\r\n    (new Array(config.fieldSize)).fill(0)\r\n);\r\n\r\nexport default initialField;","const copy = object => {\r\n    let result = {};\r\n    if (object instanceof Array) {\r\n        result = object.map(arr => [...arr]);\r\n    } else if (object instanceof Object) {\r\n        result = JSON.parse(JSON.stringify(object));\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default copy;","import {config} from \"../Config\";\r\n\r\nconst configureField = (field, row, cell) => {\r\n    const val = (-1) * (!+field[row][cell] ? config.safeValue : +field[row][cell]);\r\n    field[row][cell] = typeof field[row][cell] === 'string' ? String(val) : val;\r\n    return field[row][cell];\r\n};\r\n\r\nexport default configureField;","import { config } from \"../Config\";\r\nimport { Point } from \"./Routing\";\r\n\r\n/**\r\n * Отдает список разрешенных клеток (с координатами), те, что пустые\r\n * @param field\r\n * @returns {[]}\r\n */\r\nconst createListOfEmptyCells = (field) =>\r\n    field.flat().map((cell, index) => {\r\n        if (!cell) {\r\n            return new Point(Math.floor(index / config.fieldSize), index % config.fieldSize);\r\n        }\r\n    }).filter(cell => cell instanceof Point);\r\n\r\nexport default createListOfEmptyCells;","/**\r\n * Конкструктор объекта точки с координатами\r\n * @param row\r\n * @param cell\r\n * @constructor\r\n */\r\nfunction Point(row, cell) {\r\n    this.x = cell;\r\n    this.y = row;\r\n}\r\n\r\nexport default Point;","import React, {useEffect, useState} from 'react';\r\nimport _ from 'underscore';\r\nimport './Game.css';\r\nimport { Field, Timer } from './../Routing';\r\nimport { initialField, AI, generateShip,\r\n         copy, generateSafeArea, configureField } from \"../../utils/Routing\";\r\nimport {config} from \"../../Config\";\r\n\r\nconst setShips = (newField) =>\r\n    Object.fromEntries(\r\n        Object.entries(copy(config.ships))\r\n            .map(([ship, params]) => {\r\n                _.times(params.amount, () => {\r\n                    const { coords, renderedField } = generateShip(newField, params.size);\r\n\r\n                    params.units.push(coords);\r\n                    newField = renderedField;\r\n                });\r\n\r\n                params.destroyed = (new Array(params.amount)).fill(0);\r\n                return [ship, params];\r\n            })\r\n    );\r\n\r\nconst isWinner = (field) =>\r\n    !field.filter(row =>\r\n        !!row.filter(cell =>\r\n            +cell > 0 && +cell !== config.safeValue).length\r\n    ).length;\r\n\r\nconst checkShipDestroyed = (ships, row, cell) => {\r\n    let destroyedShip = null;\r\n    Object.entries(ships).forEach(([ship, params]) => {\r\n        const index = params.units.findIndex(unit =>\r\n            !!unit.filter(point =>\r\n                point.y === row && point.x === cell).length\r\n        );\r\n\r\n        if (index !== -1) {\r\n            if (++params.destroyed[index] === params.size) {\r\n                destroyedShip = params.units[index];\r\n                // TODO проверить для бота\r\n            }\r\n        }\r\n    });\r\n    return destroyedShip;\r\n};\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Game = () => {\r\n    const [mode, changeMode] = useState('prepare');\r\n    const [refresh, setRefresh] = useState('false');\r\n    const [guessField, setGuess] = useState(copy(initialField));\r\n    const [AIField, setAIField] = useState(copy(initialField));\r\n    const [AIShips, setAIShips] = useState(copy(config.ships));\r\n    const [playerField, setPlayerField] = useState(copy(initialField));\r\n    const [playerShips, setPlayerShips] = useState(copy(config.ships));\r\n    // const [showResult, end] = useState(false);\r\n    const [AIMemory, memorize] = useState({});\r\n    const [AIIsThinking, think] = useState(false);\r\n    const [hasWon, setVictory] = useState({\r\n        status: false,\r\n        person: ''\r\n    });\r\n    const [play, timer] = useState(true);\r\n    const [stopTime, changeStopTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (mode === 'prepare' || refresh) {\r\n            let newAIField = copy(initialField),\r\n                newPlayerField = copy(initialField);\r\n\r\n            setAIShips(setShips(newAIField));\r\n            setAIField(newAIField);\r\n\r\n            setPlayerShips(setShips(newPlayerField));\r\n            setPlayerField(newPlayerField);\r\n\r\n            setGuess(copy(initialField));\r\n            memorize({});\r\n            setRefresh(false);\r\n        }\r\n    }, [mode, refresh]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon.status) {\r\n            if (hasWon.person === 'person') {\r\n                alert('Поздравляем! Вы победили!');\r\n            } else {\r\n                alert('Это поражение...Увы :(');\r\n            }\r\n\r\n            changeMode('prepare');\r\n            timer(false);\r\n            setVictory({\r\n                status: false,\r\n                person: ''\r\n            })\r\n        }\r\n    }, [hasWon]);\r\n    \r\n    function handleFieldClick(row, cell, playFor)\r\n    {\r\n        if (mode === 'play' && playFor === 'player' && AIField[row][cell] >= 0 && !AIIsThinking && play) {\r\n            let copyAIField = copy(AIField);\r\n\r\n            configureField(copyAIField, row, cell);\r\n            if (+copyAIField[row][cell] !== (-1) * config.safeValue) {\r\n                const ship = checkShipDestroyed(AIShips, row, cell);\r\n                if (ship) {\r\n                    generateSafeArea(copyAIField, ship, true);\r\n                    checkVictory('person', copyAIField);\r\n                }\r\n                setAIField(copyAIField);\r\n            } else {\r\n                setAIField(copyAIField);\r\n                let copyPlayerField = copy(playerField);\r\n                let copyGuessField = copy(guessField);\r\n                let copyMemo = AIMemory;\r\n                let value = 0,\r\n                    destroyedShip = false,\r\n                    victory = false;\r\n\r\n                const rerender = () => {\r\n                    setGuess(copyGuessField);\r\n                    setPlayerField(copyPlayerField);\r\n                    memorize(copyMemo);\r\n                };\r\n\r\n                const createThought = (needRerender = false) =>\r\n                    new Promise((resolve, reject) => {\r\n                        if (+value !== (-1) * config.safeValue && !victory) {\r\n                            if (needRerender) rerender();\r\n                            think(true);\r\n                            setTimeout(() => {\r\n                                think(false);\r\n                                resolve(AI(copy(copyGuessField), destroyedShip, copyMemo));\r\n                            }, config.timeAIIsWaiting);\r\n                        } else {\r\n                            reject('finished');\r\n                        }\r\n                    });\r\n\r\n                const makeAIMove = promise => {\r\n                    promise.then(result => {\r\n                        const { rowAI, cellAI, ...rest } = result;\r\n                        destroyedShip = false;\r\n                        copyMemo = rest;\r\n                        copyGuessField[rowAI][cellAI] = value = configureField(copyPlayerField, rowAI, cellAI);\r\n                        const ship = checkShipDestroyed(playerShips, rowAI, cellAI);\r\n                        if (ship) {\r\n                            destroyedShip = true;\r\n                            generateSafeArea(copyPlayerField, ship, true);\r\n                            generateSafeArea(copyGuessField, ship, true);\r\n                            victory = checkVictory('AI', copyPlayerField);\r\n                        }\r\n                        // victory = isWinner(copyPlayerField);\r\n                        makeAIMove(createThought(true));\r\n                    }, finished => {\r\n                        rerender();\r\n                    });\r\n                };\r\n\r\n                makeAIMove(createThought());\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkVictory = (person, field) => {\r\n        if (isWinner(field)) {\r\n            let competitor = 'person';\r\n            if (person === 'AI') {\r\n                competitor = 'AI';\r\n            }\r\n            setVictory({\r\n                status: true,\r\n                person: competitor\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handlePlayRestart = () => {\r\n        if (mode === 'prepare') {\r\n            changeMode('play');\r\n            timer(true);\r\n        } else {\r\n            timer(false);\r\n            changeMode('prepare');\r\n        }\r\n    };\r\n\r\n    const handleStopTimer = (value) => changeStopTime(value);\r\n\r\n    return (\r\n        <div id=\"game\">\r\n            {\r\n                mode === 'play' &&\r\n                <Timer action={play} changeStopTime={handleStopTimer}/>\r\n            }\r\n            <div id=\"fields\">\r\n                <Field playFor={mode === 'prepare' ? 'player' : 'AI'}\r\n                       field={playerField}\r\n                       mode={mode}\r\n                       handleClick={handleFieldClick}/>\r\n                {\r\n                    mode === 'play' &&\r\n                    <Field playFor={'player'}\r\n                           field={AIField}\r\n                           mode={mode}\r\n                           handleClick={handleFieldClick}/>\r\n                }\r\n            </div>\r\n            <div className=\"button_group\">\r\n                <img src={`./img/${mode === 'prepare' ? 'power-button' : 'refresh'}.png`} alt=\"control\"\r\n                     onClick={() => handlePlayRestart()}/>\r\n                {\r\n                    mode === 'prepare' ? (\r\n                        <img src={`./img/loop.png`} alt=\"refresh\"\r\n                             onClick={() => setRefresh(true)}/>\r\n                    ) : (\r\n                        <img src={`./img/${play ? \"pause\" : \"play\"}.png`} alt=\"timer\"\r\n                             onClick={() => timer(play => !play)}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nconst Timer = ({ action, changeStopTime }) => {\r\n    const [time, update] = useState(0);\r\n    const [interval, change] = useState(null);\r\n    const [hours, setHours] = useState(null);\r\n    const [minutes, setMinutes] = useState(null);\r\n    const [seconds, setSeconds] = useState(null);\r\n\r\n    const start = () =>\r\n        change(setInterval(() => {\r\n            update(prev => prev + 1)\r\n        }, 1000));\r\n\r\n    const stop = () => clearInterval(interval);\r\n\r\n    useEffect(() => action ? start() : stop(), [action]);\r\n\r\n    useEffect(() => changeStopTime(time));\r\n\r\n    useEffect(() => {\r\n        let hours = 0, minutes = 0, seconds = 0;\r\n\r\n        hours = Math.floor(time / 3600);\r\n        minutes = Math.floor((time - hours * 3600) / 60);\r\n        seconds = time - (hours * 3600 + minutes * 60);\r\n\r\n        setHours(String(hours).padStart(2, \"0\"));\r\n        setMinutes(String(minutes).padStart(2, \"0\"));\r\n        setSeconds(String(seconds).padStart(2, \"0\"));\r\n    }, [time]);\r\n\r\n    return(\r\n        <div id='timer'>\r\n            <strong>{hours} : {minutes} : {seconds}</strong>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport './Enter.css';\r\nimport Cookies from 'universal-cookie';\r\nimport {config} from \"../../Config\";\r\n\r\n/* Модальное окно */\r\nconst modal = document.getElementById('id01');\r\nwindow.onclick = function(event) {\r\n    if (event.target === modal) {\r\n        modal.style.display = \"none\";\r\n    }\r\n};\r\n\r\nconst EnterPage = ({ logIn }) => {\r\n    const [userName, setName] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch('/api/users',{\r\n            method:'post',\r\n            headers:{ ...config.defaultHeaders },\r\n            body: JSON.stringify({name: userName})\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                logIn(userName);\r\n            }\r\n            throw new Error(res.statusText);\r\n        }).catch(e => alert(e.message));\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => document.getElementById('id01').style.display='block'}\r\n                    className=\"ENT\">Играть &laquo;Морской Бой&raquo;</button>\r\n\r\n            <div id=\"id01\" className=\"modal\">\r\n                <form className=\"modal-content animate\" onSubmit={handleSubmit}>\r\n                    <div className=\"imgcontainer\">\r\n                        <span onClick={ () => document.getElementById('id01').style.display='none'}\r\n                              className=\"close\" title=\"Close Modal\">×</span>\r\n                        <img src=\"https://thumbs.gfycat.com/FrankFreeAmericankestrel-size_restricted.gif\"\r\n                             alt=\"Avatar\" className=\"avatar\" />\r\n                    </div>\r\n\r\n                    <div className=\"container\">\r\n                        <label htmlFor=\"uname\" style={{fontSize: \"2vh\"}}><b>Привет, я Smart, а ты...</b></label><br /><br />\r\n                        <input className='form-row' type=\"text\" placeholder=\"Введите имя\" name=\"uname\"\r\n                               autoComplete=\"off\" value={userName} onChange={e => setName(e.target.value)} required /><br /><br />\r\n                        <button type=\"submit\" className=\"button1\">ИГРАТЬ</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EnterPage;","import React, { Component } from 'react';\r\nimport _ from 'underscore';\r\nimport './Chat.css';\r\nimport { Input, Messages } from \"./../Routing\";\r\n\r\nfunction randomColor() {\r\n    return \"rgba(\" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", 0.8)\";\r\n}\r\n\r\nclass Chat extends Component {\r\n    state = {\r\n        messages: [],\r\n        member: {\r\n            username: 'name',\r\n            color: randomColor(),\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Chat\">\r\n                <div className=\"Chat-header\">\r\n                    <h1>Общий чат</h1>\r\n                </div>\r\n                <Messages\r\n                    messages={this.state.messages}\r\n                    currentMember={this.state.member}\r\n                />\r\n                <Input\r\n                    onSendMessage={this.onSendMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSendMessage = (message) => {\r\n        const messages = this.state.messages;\r\n        const member = this.state.member;\r\n        messages.push({member,text: message});\r\n        this.setState({messages});\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        text: \"\"\r\n    };\r\n\r\n    onChange(e) {\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onSendMessage(this.state.text);\r\n        this.setState({text:\"\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Input\">\r\n                <form onSubmit={e => this.onSubmit(e)} className=\"chat_form\">\r\n                    <input\r\n                        className=\"chat_input\"\r\n                        onChange={e => this.onChange(e)}\r\n                        value={this.state.text}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите сообщение\"\r\n                    />\r\n                    <button className=\"chat_button\">Отправить</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport _ from \"underscore\";\r\n\r\nfunction randomColor() {\r\n    return \"rgba(\" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", 0.65)\";\r\n}\r\n\r\nclass Message extends Component {\r\n    render() {\r\n        const {messages} = this.props;\r\n        return (\r\n            <ul className=\"Messages-list\">\r\n                {messages.map(m => this.renderMessage(m))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    renderMessage(message) {\r\n        const {member, text} = message;\r\n        const {currentMember} = this.props;\r\n        const messageFromMe = member.id === currentMember.id;\r\n        const className = messageFromMe ?\r\n            \"Messages-message currentMember\" : \"Messages-message\";\r\n        return (\r\n            <li className={className}>\r\n                <div className=\"Message-content\">\r\n                    {\r\n                        !messageFromMe &&\r\n                        <div className=\"username\">\r\n                            { member.username}\r\n                        </div>\r\n                    }\r\n                    <div className=\"text\" style={{backgroundColor: currentMember.color}}>{text}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;","import React, { useEffect, useState } from 'react';\r\nimport Cookies from 'universal-cookie';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport { App, EnterPage } from './components/Routing';\r\nimport {config} from \"./Config\";\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst Main = () => {\r\n    const [userName, enter] = useState('');\r\n    const [authToken, setToken] = useState(cookies.get('sid'));\r\n\r\n    useEffect(() => {\r\n        if (authToken) {\r\n            fetch('/api/users', {\r\n                headers: {\r\n                    ...config.defaultHeaders,\r\n                    'Cookie': 'sid=' + authToken\r\n                }\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    return res.json();\r\n                }\r\n                throw new Error(res.statusText);\r\n            }).then(data => {\r\n                console.log(data);\r\n                enter('blabla');\r\n            }).catch(e => alert(`Ошибка: ${e.message}`));\r\n        }\r\n    }, []);\r\n\r\n    const logIn = (name) => {\r\n        enter(name);\r\n        const token = cookies.get('sid');\r\n        console.log(token);\r\n        if (token) {\r\n            setToken(token);\r\n        }\r\n    };\r\n\r\n    return(\r\n        !!authToken ? <App userName={userName}/> : <EnterPage logIn={logIn}/>\r\n    );\r\n};\r\n\r\nrender(\r\n    <Main />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}