{"version":3,"sources":["components/App/App.js","Config.js","components/Field/Field.js","utils/GenerateShip.js","utils/GenerateSafeArea.js","utils/AI.js","utils/InitialField.js","utils/CreateCopy.js","utils/ConfigureField.js","utils/CreateEmpty.js","utils/Point.js","components/Game/Game.js","components/Timer/Timer.js","components/Enter/Enter.js","components/Chat/Chat.js","components/Input/Input.js","components/Message/Message.js","components/Ships/Ships.js","index.js"],"names":["App","logout","userName","id","className","src","alt","onClick","name","config","fieldSize","ships","battleship","size","amount","units","destroyed","cruiser","destroyer","boat","safeValue","timeAIIsWaiting","timerStart","defaultHeaders","Field","field","mode","playFor","handleClick","map","row","rowIndex","key","cell","index","value","idName","parseInt","Math","abs","getClassAndId","locateShip","head","coords","directions","y","x","tryDirection","futureShip","offset","shipCells","iter","push","every","forEach","Point","randomDirection","_","random","length","splice","generateShip","empty","createListOfEmptyCells","point","generateSafeArea","renderedField","toString","safe","sides","rowOffset","cellOffset","String","AI","points","ship","startPoint","endPoint","choice","checkCanVisit","getMovedEndPoint","invert","diffRow","diffCell","searchEndPoint","tail","tailRow","tailCell","availableDirs","filter","dir","movedEndPoint","tryIndex","findIndex","tryDir","headRow","headCell","searchStartPoint","copy","newEndPoint","rowAI","cellAI","initialField","Array","fill","object","result","arr","Object","JSON","parse","stringify","configureField","val","flat","floor","this","setShips","newField","fromEntries","entries","params","times","checkShipDestroyed","destroyedShip","shipType","destroyedIndex","unit","Game","useState","gameID","setGameID","changeMode","refresh","setRefresh","guessField","setGuess","AIField","setAIField","AIShips","setAIShips","playerField","setPlayerField","playerShips","setPlayerShips","AIMemory","memorize","AIIsThinking","think","status","person","hasWon","setVictory","play","timer","useEffect","newAIField","newPlayerField","alert","sendGameResult","fetch","method","headers","body","score","then","res","Error","statusText","console","log","catch","e","handleFieldClick","copyAIField","type","copyAIShips","checkVictory","copyPlayerField","copyGuessField","copyMemo","victory","rerender","createThought","needRerender","Promise","resolve","reject","setTimeout","makeAIMove","promise","rest","copyPlayerShips","finished","isWinner","competitor","fleet","player","action","game","json","data","Timer","time","update","interval","change","hours","setHours","minutes","setMinutes","seconds","setSeconds","setInterval","prev","clearInterval","padStart","modal","document","getElementById","window","onclick","event","target","style","display","EnterPage","logIn","setName","onSubmit","preventDefault","title","htmlFor","fontSize","placeholder","autoComplete","onChange","required","Chat","state","messages","member","username","color","onSendMessage","message","text","setState","currentMember","Component","Input","props","Message","m","renderMessage","messageFromMe","backgroundColor","Ships","justifyContent","unitIndex","width","render","enter"],"mappings":"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","file":"static/js/main.67cee15e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Game, Chat } from './../Routing';\r\n\r\nconst App = ({ logout, userName }) => {\r\n    return (\r\n        <div id=\"App\">\r\n            <img className=\"logout\" src=\"./img/logout.png\" alt=\"logout\"\r\n                onClick={() => logout()}/>\r\n            <Game name={userName}/>\r\n            <Chat />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n    fieldSize: 10,\r\n    ships: {\r\n        battleship: {\r\n            size: 4,\r\n            amount: 1,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        cruiser: {\r\n            size: 3,\r\n            amount: 2,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        destroyer: {\r\n            size: 2,\r\n            amount: 3,\r\n            units: [],\r\n            destroyed: []\r\n        },\r\n        boat: {\r\n            size: 1,\r\n            amount: 4,\r\n            units: [],\r\n            destroyed: []\r\n        }\r\n    },\r\n    safeValue: 5,\r\n    timeAIIsWaiting: 500,\r\n    timerStart: 30,\r\n    defaultHeaders: {\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    }\r\n};","import React from 'react';\r\nimport './Field.css';\r\nimport {config} from \"../../Config\";\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @param field\r\n * @param mode\r\n * @param playFor\r\n * @param handleClick\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Field = ({ field, mode, playFor, handleClick }) => {\r\n\r\n    const getClassAndId = (value) => {\r\n        let className = 'cell',\r\n            idName = 'empty';\r\n\r\n        if (parseInt(value) === (-1) * config.safeValue) {\r\n            idName = 'missed';\r\n        }\r\n        else if (parseInt(value) < 0) {\r\n            idName = 'killed';\r\n        }\r\n\r\n        if (mode === 'prepare') {\r\n            className += ' big_cell';\r\n        }\r\n        if (typeof value === 'string') {\r\n            className += ' safe';\r\n        } else {\r\n            if ((mode === 'play' && playFor === 'AI') ||\r\n                (mode === 'prepare' && playFor === 'player')) {\r\n\r\n                if (!value || Math.abs(value) === config.safeValue) {\r\n                    className += ' empty';\r\n                }\r\n            } else {\r\n                if (idName !== 'killed') {\r\n                    className += ' empty';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            idName: idName,\r\n            className: className\r\n        };\r\n    };\r\n\r\n    return(\r\n        <div className=\"field\">\r\n            {\r\n                field.map((row, rowIndex) =>\r\n                    <div className=\"row\" key={rowIndex}>\r\n                        {\r\n                            row.map((cell, index) => {\r\n                                const { idName, className } = getClassAndId(cell);\r\n                                return (\r\n                                    <div className={className}\r\n                                         onClick={() => handleClick(rowIndex, index, playFor)}\r\n                                         key={index}>\r\n\r\n                                        <div id={idName}>\r\n                                            {idName === 'killed' && <img src=\"./img/fire.png\" alt=\"killed\"/>}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Field;","import { config } from \"../Config\";\r\nimport { generateSafeArea, createListOfEmptyCells, Point } from \"./Routing\";\r\nimport _ from \"underscore\";\r\n\r\n/**\r\n * По созданным конфигам (directions) для каждого направления\r\n *  выбираем случайное и пытаемся посторить корабль\r\n *  если не выходит вычеркиваем его из списка доступных напрвлений\r\n * Как только все направления были перебраны и корабль не удалось построить\r\n *  выозвращаем coords с одной точкой - вершина начала корабля - сигнал неудачи для кораблей длиннее лодки\r\n * @param head\r\n * @param field\r\n * @param size\r\n * @returns {[*]}\r\n */\r\nconst locateShip = (head, field, size) => {\r\n    let coords = [head];            // список координат клеток корабля\r\n\r\n    const directions = [\r\n        { 'futureShip': head.y - size, 'offset': { 'y': -1, 'x': 0 } },     // вверх\r\n        { 'futureShip': head.x + size, 'offset': { 'y': 0, 'x': 1 } },      // вправо\r\n        { 'futureShip': head.y + size, 'offset': { 'y': 1, 'x': 0 } },      // вниз\r\n        { 'futureShip': head.x - size, 'offset': { 'y': 0, 'x': -1 } }      // влево\r\n    ];\r\n\r\n    const tryDirection = ({ futureShip, offset }) => {\r\n        if (0 <= futureShip && futureShip < config.fieldSize) {\r\n            let shipCells = [];\r\n            let iter = size;\r\n\r\n            while(iter) {\r\n                shipCells.push(field[head.y + iter * offset.y][head.x + iter * offset.x]);\r\n                iter--;\r\n            }\r\n\r\n            if (shipCells.every(cell => !cell)) {\r\n                shipCells.forEach((cell, index) =>\r\n                    coords.push(\r\n                        new Point(head.y + (index + 1) * offset.y,\r\n                            head.x + (index + 1) * offset.x)\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    };\r\n\r\n    // нет смысла выбирать направление для корабля длиной в одну клетку\r\n    if (size) {\r\n        do {\r\n            const randomDirection = _.random(directions.length - 1);\r\n            tryDirection(directions[randomDirection]);\r\n            if (coords.length === 1) {\r\n                directions.splice(randomDirection, 1);\r\n            }\r\n\r\n        } while(coords.length === 1 && directions.length);\r\n    }\r\n    return coords;\r\n};\r\n\r\n/**\r\n * Генерируем корабль\r\n *  - получаем все клетки куда можно поставить корбаль (его первую вершину)\r\n *  - выбираем из доступных случайную клетку\r\n *  - для этой клетки выбираем из доступных направление для корабля\r\n *  - если для выбранной клетки ни в каком из направлений невозможно поставить\r\n *      корабль, то выбираем другую клетку (случайно)\r\n * @param field\r\n * @param size\r\n * @returns {{renderedField: *, coords: *}}\r\n */\r\nconst generateShip = (field, size) => {\r\n    const empty = createListOfEmptyCells(field);\r\n    let coords = [];\r\n\r\n    do {\r\n        // выбираем из списка пустых клеток случаную\r\n        const point = empty[_.random(empty.length - 1)];\r\n        // выбираем направление корабля и получаем его координаты (или коор-ту первой вершины)\r\n        // size - 1 - так как первая вершина уже выбрана\r\n        coords = locateShip(point, field, size - 1);\r\n    } while(coords.length !== size);\r\n\r\n    // ставим корабль на поле\r\n    coords.forEach(cell => field[cell.y][cell.x] = size);\r\n    // строим зону \"неприкосновенности\" вокруг корабля\r\n    generateSafeArea(field, coords);\r\n    return {\r\n        coords: coords,\r\n        renderedField: field\r\n    };\r\n};\r\n\r\nexport default generateShip;","import { config } from \"../Config\";\r\n\r\n/**\r\n * Грубо говоря пробегаемся по каждой клетке корабля и смотрим\r\n *  во все 8 условий (4 угла 4 стороны)\r\n * @param field\r\n * @param coords\r\n * @param toString\r\n */\r\nconst generateSafeArea = (field, coords, toString = false) => {\r\n    const safe = config.safeValue,\r\n        size = config.fieldSize,\r\n        sides = [-1, 0, 1];\r\n\r\n    coords.forEach(point => {\r\n        sides.forEach(rowOffset => {\r\n            const row = point.y + rowOffset;\r\n            sides.forEach(cellOffset => {\r\n                const cell = point.x + cellOffset;\r\n                if (0 <= row && row < size &&\r\n                    0 <= cell && cell < size &&\r\n                    (toString ? Math.abs(field[row][cell]) === config.safeValue || !field[row][cell] : !field[row][cell])) {\r\n\r\n                    field[row][cell] = toString ? String(field[row][cell]) : safe;\r\n                }\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport default generateSafeArea;","import _ from 'underscore';\r\nimport {config} from './../Config';\r\nimport {copy, createListOfEmptyCells} from \"./Routing\";\r\n\r\nconst AI = (field, destroyed, points) => {\r\n    const { startPoint, endPoint } = points.ship || {startPoint: null, endPoint: null};\r\n    const choice = { row: null, cell: null },\r\n        ship = {\r\n            startPoint: null,\r\n            endPoint: null\r\n        };\r\n\r\n    const searchStartPoint = () => {\r\n        let random = {},\r\n            value = 0;\r\n        const empty = createListOfEmptyCells(field);\r\n\r\n        do {\r\n            random = empty[_.random(empty.length - 1)];\r\n            value = +field[random.y][random.x];\r\n        } while (value < 0 || value === 5 || field[random.y][random.x] === \"0\");\r\n\r\n        return {\r\n            headRow: random.y,\r\n            headCell: random.x\r\n        }\r\n    };\r\n\r\n    const checkCanVisit = (row, cell) =>\r\n        0 <= row && row < config.fieldSize &&\r\n        0 <= cell && cell < config.fieldSize;\r\n\r\n    const getMovedEndPoint = (point, invert = false) => {\r\n        const diffRow = endPoint.row - startPoint.row,\r\n            diffCell = endPoint.cell - startPoint.cell,\r\n            index = invert ? (-1) : 1;\r\n        return {\r\n            row: !diffRow ? point.row : point.row + index * (diffRow / Math.abs(diffRow)),\r\n            cell: !diffCell ? point.cell : point.cell + index * (diffCell / Math.abs(diffCell))\r\n        };\r\n    };\r\n\r\n    const searchEndPoint = () => {\r\n        const tail = {\r\n            tailRow: null,\r\n            tailCell: null\r\n        };\r\n\r\n        // if (missedShot) {\r\n        const directions = [\r\n            { offset: { row: -1, cell: 0 } },     // вверх\r\n            { offset: { row: 0, cell: 1 } },      // вправо\r\n            { offset: { row: 1, cell: 0 } },      // вниз\r\n            { offset: { row: 0, cell: -1 } }      // влево\r\n        ];\r\n        const availableDirs = directions.filter(dir =>\r\n            checkCanVisit(startPoint.row + dir.offset.row, startPoint.cell + dir.offset.cell) &&\r\n                    !field[startPoint.row + dir.offset.row][startPoint.cell + dir.offset.cell]);\r\n        if ((startPoint.row - endPoint.row) && (startPoint.cell - endPoint.cell)) {\r\n            const movedEndPoint = getMovedEndPoint(startPoint);\r\n            const tryIndex =\r\n                availableDirs.findIndex(dir =>\r\n                    dir.offset.row === movedEndPoint.row - startPoint.row &&\r\n                    dir.offset.cell === movedEndPoint.cell - startPoint.cell);\r\n            if (tryIndex !== -1) {\r\n                tail.tailRow = startPoint.row + availableDirs[tryIndex].offset.row;\r\n                tail.tailCell = startPoint.cell + availableDirs[tryIndex].offset.cell;\r\n            }\r\n        }\r\n\r\n        if (tail.tailCell === null) {\r\n            const tryDir = availableDirs[_.random(availableDirs.length - 1)].offset;\r\n            tail.tailRow = startPoint.row + tryDir.row;\r\n            tail.tailCell = startPoint.cell + tryDir.cell;\r\n        }\r\n        return tail;\r\n    };\r\n\r\n    if (!startPoint ||\r\n            field[startPoint.row][startPoint.cell] === (-1) * config.safeValue ||\r\n            destroyed) {\r\n        const { headRow, headCell } = searchStartPoint();\r\n        choice.row = headRow;\r\n        choice.cell = headCell;\r\n        ship.startPoint = copy(choice);\r\n        ship.endPoint = copy(choice);\r\n    } else if (!endPoint ||\r\n            (startPoint.row === endPoint.row && startPoint.cell === endPoint.cell) ||\r\n            field[endPoint.row][endPoint.cell] === (-1) * config.safeValue) {\r\n        const { tailRow, tailCell } = searchEndPoint();\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    } else {\r\n        const movedEndPoint = getMovedEndPoint(endPoint);\r\n        let tailRow = movedEndPoint.row,\r\n            tailCell = movedEndPoint.cell;\r\n\r\n        if (!(checkCanVisit(tailRow, tailCell) && Math.abs(+field[tailRow][tailCell]) !== config.safeValue)) {\r\n            const newEndPoint = searchEndPoint();\r\n            tailRow = newEndPoint.tailRow;\r\n            tailCell = newEndPoint.tailCell;\r\n        }\r\n\r\n        choice.row = tailRow;\r\n        choice.cell = tailCell;\r\n        ship.startPoint = startPoint;\r\n        ship.endPoint = copy(choice);\r\n    }\r\n\r\n    return {\r\n        rowAI: choice.row,\r\n        cellAI: choice.cell,\r\n        ship: ship\r\n    }\r\n};\r\n\r\nexport default AI;","import {config} from \"../Config\";\r\n\r\n/**\r\n * Двумерный массив (квадрат), заданного размера, заполненный нулями\r\n * @type {any[]}\r\n */\r\nconst initialField = (new Array(config.fieldSize)).fill(\r\n    (new Array(config.fieldSize)).fill(0)\r\n);\r\n\r\nexport default initialField;","const copy = object => {\r\n    let result = {};\r\n    if (object instanceof Array) {\r\n        result = object.map(arr => [...arr]);\r\n    } else if (object instanceof Object) {\r\n        result = JSON.parse(JSON.stringify(object));\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default copy;","import {config} from \"../Config\";\r\n\r\nconst configureField = (field, row, cell) => {\r\n    const val = (-1) * (!+field[row][cell] ? config.safeValue : +field[row][cell]);\r\n    field[row][cell] = typeof field[row][cell] === 'string' ? String(val) : val;\r\n    return field[row][cell];\r\n};\r\n\r\nexport default configureField;","import { config } from \"../Config\";\r\nimport { Point } from \"./Routing\";\r\n\r\n/**\r\n * Отдает список разрешенных клеток (с координатами), те, что пустые\r\n * @param field\r\n * @returns {[]}\r\n */\r\nconst createListOfEmptyCells = (field) =>\r\n    field.flat().map((cell, index) => {\r\n        if (!cell) {\r\n            return new Point(Math.floor(index / config.fieldSize), index % config.fieldSize);\r\n        }\r\n    }).filter(cell => cell instanceof Point);\r\n\r\nexport default createListOfEmptyCells;","/**\r\n * Конкструктор объекта точки с координатами\r\n * @param row\r\n * @param cell\r\n * @constructor\r\n */\r\nfunction Point(row, cell) {\r\n    this.x = cell;\r\n    this.y = row;\r\n}\r\n\r\nexport default Point;","import React, {useEffect, useState} from 'react';\r\nimport _ from 'underscore';\r\nimport './Game.css';\r\nimport { Field, Timer, Ships } from './../Routing';\r\nimport { initialField, AI, generateShip,\r\n         copy, generateSafeArea, configureField } from \"../../utils/Routing\";\r\nimport {config} from \"../../Config\";\r\n\r\nconst setShips = (newField) =>\r\n    Object.fromEntries(\r\n        Object.entries(copy(config.ships))\r\n            .map(([ship, params]) => {\r\n                _.times(params.amount, () => {\r\n                    const { coords, renderedField } = generateShip(newField, params.size);\r\n\r\n                    params.units.push(coords);\r\n                    newField = renderedField;\r\n                });\r\n\r\n                params.destroyed = (new Array(params.amount)).fill(0);\r\n                return [ship, params];\r\n            })\r\n    );\r\n\r\nconst isWinner = (field) =>\r\n    !field.filter(row =>\r\n        !!row.filter(cell =>\r\n            +cell > 0 && +cell !== config.safeValue).length\r\n    ).length;\r\n\r\nconst checkShipDestroyed = (ships, row, cell) => {\r\n    let destroyedShip = null,\r\n        shipType = null,\r\n        destroyedIndex = null;\r\n    Object.entries(ships).forEach(([ship, params]) => {\r\n        const index = params.units.findIndex(unit =>\r\n            !!unit.filter(point =>\r\n                point.y === row && point.x === cell).length\r\n        );\r\n\r\n        if (index !== -1) {\r\n            if (++params.destroyed[index] === params.size) {\r\n                destroyedShip = params.units[index];\r\n                shipType = ship;\r\n                destroyedIndex = index;\r\n                // TODO проверить для бота\r\n            }\r\n        }\r\n    });\r\n    return {\r\n        destroyedShip: destroyedShip,\r\n        shipType: shipType,\r\n        destroyedIndex: destroyedIndex\r\n    }\r\n};\r\n\r\n/**\r\n * TODO подумать над оптимизацией\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst Game = ({ name }) => {\r\n    const [gameID, setGameID] = useState('');\r\n    const [mode, changeMode] = useState('prepare');\r\n    const [refresh, setRefresh] = useState('false');\r\n    const [guessField, setGuess] = useState(copy(initialField));\r\n    const [AIField, setAIField] = useState(copy(initialField));\r\n    const [AIShips, setAIShips] = useState(copy(config.ships));\r\n    const [playerField, setPlayerField] = useState(copy(initialField));\r\n    const [playerShips, setPlayerShips] = useState(copy(config.ships));\r\n    const [AIMemory, memorize] = useState({});\r\n    const [AIIsThinking, think] = useState(false);\r\n    const [hasWon, setVictory] = useState({\r\n        status: false,\r\n        person: ''\r\n    });\r\n    const [play, timer] = useState(true);\r\n    // const [stopTime, changeStopTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (mode === 'prepare' || refresh) {\r\n            let newAIField = copy(initialField),\r\n                newPlayerField = copy(initialField);\r\n\r\n            setAIShips(setShips(newAIField));\r\n            setAIField(newAIField);\r\n\r\n            setPlayerShips(setShips(newPlayerField));\r\n            setPlayerField(newPlayerField);\r\n\r\n            setGuess(copy(initialField));\r\n            memorize({});\r\n            setRefresh(false);\r\n        }\r\n    }, [mode, refresh]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon.status) {\r\n            if (hasWon.person === 'person') {\r\n                alert('Поздравляем! Вы победили!');\r\n            } else {\r\n                alert('Это поражение...Увы :(');\r\n            }\r\n\r\n            changeMode('prepare');\r\n            timer(false);\r\n            setVictory({\r\n                status: false,\r\n                person: ''\r\n            });\r\n            sendGameResult();\r\n        }\r\n    });\r\n\r\n    const sendGameResult = () => {\r\n        if (!gameID) {\r\n            console.log('Game ID не задан')\r\n        } else {\r\n            fetch('/api/records', {\r\n                method: 'patch',\r\n                headers: { ...config.defaultHeaders },\r\n                body: JSON.stringify({\r\n                    id: gameID,\r\n                    score: AIField.flat().filter(cell =>\r\n                        +cell > 0 && +cell !== config.safeValue).length\r\n                })\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    console.log(`Sent score data successfully`);\r\n                } else {\r\n                    throw new Error(res.statusText);\r\n                }\r\n            }).catch(e => console.log(e));\r\n        }\r\n    };\r\n    \r\n    function handleFieldClick(row, cell, playFor)\r\n    {\r\n        if (mode === 'play' && playFor === 'player' && AIField[row][cell] >= 0 && !AIIsThinking && play) {\r\n            let copyAIField = copy(AIField);\r\n\r\n            configureField(copyAIField, row, cell);\r\n            if (+copyAIField[row][cell] !== (-1) * config.safeValue) {\r\n                const { destroyedShip: ship,\r\n                        shipType: type,\r\n                        destroyedIndex: index } = checkShipDestroyed(AIShips, row, cell);\r\n                if (ship) {\r\n                    const copyAIShips = copy(AIShips);\r\n                    copyAIShips[type].units.splice(index, 1);\r\n                    setAIShips(copyAIShips);\r\n\r\n                    generateSafeArea(copyAIField, ship, true);\r\n                    checkVictory('person', copyAIField);\r\n                }\r\n                setAIField(copyAIField);\r\n            } else {\r\n                setAIField(copyAIField);\r\n                let copyPlayerField = copy(playerField);\r\n                let copyGuessField = copy(guessField);\r\n                let copyMemo = AIMemory;\r\n                let value = 0,\r\n                    destroyedShip = false,\r\n                    victory = false;\r\n\r\n                const rerender = () => {\r\n                    setGuess(copyGuessField);\r\n                    setPlayerField(copyPlayerField);\r\n                    memorize(copyMemo);\r\n                };\r\n\r\n                const createThought = (needRerender = false) =>\r\n                    new Promise((resolve, reject) => {\r\n                        if (+value !== (-1) * config.safeValue && !victory) {\r\n                            if (needRerender) rerender();\r\n                            think(true);\r\n                            setTimeout(() => {\r\n                                think(false);\r\n                                resolve(AI(copy(copyGuessField), destroyedShip, copyMemo));\r\n                            }, config.timeAIIsWaiting);\r\n                        } else {\r\n                            reject('finished');\r\n                        }\r\n                    });\r\n\r\n                const makeAIMove = promise => {\r\n                    promise.then(result => {\r\n                        const { rowAI, cellAI, ...rest } = result;\r\n                        destroyedShip = false;\r\n                        copyMemo = rest;\r\n                        copyGuessField[rowAI][cellAI] = value = configureField(copyPlayerField, rowAI, cellAI);\r\n                        const { destroyedShip: ship,\r\n                                shipType: type,\r\n                                destroyedIndex: index } = checkShipDestroyed(playerShips, rowAI, cellAI);\r\n                        if (ship) {\r\n                            destroyedShip = true;\r\n                            const copyPlayerShips = copy(playerShips);\r\n                            copyPlayerShips[type].units.splice(index, 1);\r\n                            setPlayerShips(copyPlayerShips);\r\n\r\n                            generateSafeArea(copyPlayerField, ship, true);\r\n                            generateSafeArea(copyGuessField, ship, true);\r\n                            victory = checkVictory('AI', copyPlayerField);\r\n                        }\r\n                        makeAIMove(createThought(true));\r\n                    }, finished => {\r\n                        rerender();\r\n                    });\r\n                };\r\n\r\n                makeAIMove(createThought());\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkVictory = (person, field) => {\r\n        if (isWinner(field)) {\r\n            let competitor = 'person';\r\n            if (person === 'AI') {\r\n                competitor = 'AI';\r\n            }\r\n            setVictory({\r\n                status: true,\r\n                person: competitor\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handlePlayRestart = () => {\r\n        if (mode === 'prepare') {\r\n            changeMode('play');\r\n            timer(true);\r\n            fetch('/api/records', {\r\n                method: 'post',\r\n                headers: { ...config.defaultHeaders },\r\n                body: JSON.stringify({ game: \"Морской бой\" })\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    console.log('Successfully notify server about game start');\r\n                    return res.json();\r\n                } else {\r\n                    throw new Error(res.statusText);\r\n                }\r\n            }).then(data => {\r\n                console.log(data);\r\n                setGameID(data.id);\r\n            }).catch(e => console.log(e));\r\n        } else {\r\n            timer(false);\r\n            changeMode('prepare');\r\n            sendGameResult();\r\n        }\r\n    };\r\n\r\n    // const handleStopTimer = (value) => changeStopTime(value);\r\n\r\n    return (\r\n        <div id=\"game\">\r\n            {\r\n                mode === 'play' &&\r\n                <div className=\"game_header\">\r\n                    <Ships fleet={playerShips} name=\"Smart\" player=\"AI\"/>\r\n                    <Timer action={play}/>\r\n                    <Ships fleet={AIShips} name={name} player=\"user\"/>\r\n                </div>\r\n            }\r\n            <div id=\"fields\">\r\n                <Field playFor={mode === 'prepare' ? 'player' : 'AI'}\r\n                       field={playerField}\r\n                       mode={mode}\r\n                       handleClick={handleFieldClick}/>\r\n                {\r\n                    mode === 'play' &&\r\n                    <Field playFor={'player'}\r\n                           field={AIField}\r\n                           mode={mode}\r\n                           handleClick={handleFieldClick}/>\r\n                }\r\n            </div>\r\n            <div className=\"button_group\">\r\n                <img src={`./img/${mode === 'prepare' ? 'power-button' : 'refresh'}.png`} alt=\"control\"\r\n                     onClick={() => handlePlayRestart()}/>\r\n                {\r\n                    mode === 'prepare' ? (\r\n                        <img src={`./img/loop.png`} alt=\"refresh\"\r\n                             onClick={() => setRefresh(true)}/>\r\n                    ) : (\r\n                        <img src={`./img/${play ? \"pause\" : \"play\"}.png`} alt=\"timer\"\r\n                             onClick={() => {\r\n                                 if (play) {\r\n                                     sendGameResult();\r\n                                 }\r\n                                 timer(play => !play);\r\n                             }}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nconst Timer = ({ action }) => {\r\n    const [time, update] = useState(0);\r\n    const [interval, change] = useState(null);\r\n    const [hours, setHours] = useState(null);\r\n    const [minutes, setMinutes] = useState(null);\r\n    const [seconds, setSeconds] = useState(null);\r\n\r\n    const start = () =>\r\n        change(setInterval(() => {\r\n            update(prev => prev + 1)\r\n        }, 1000));\r\n\r\n    const stop = () => clearInterval(interval);\r\n\r\n    useEffect(() => action ? start() : stop(), [action]);\r\n\r\n    // useEffect(() => changeStopTime(time));\r\n\r\n    useEffect(() => {\r\n        let hours = 0, minutes = 0, seconds = 0;\r\n\r\n        hours = Math.floor(time / 3600);\r\n        minutes = Math.floor((time - hours * 3600) / 60);\r\n        seconds = time - (hours * 3600 + minutes * 60);\r\n\r\n        setHours(String(hours).padStart(2, \"0\"));\r\n        setMinutes(String(minutes).padStart(2, \"0\"));\r\n        setSeconds(String(seconds).padStart(2, \"0\"));\r\n    }, [time]);\r\n\r\n    return(\r\n        <div id='timer'>\r\n            <strong>{hours} : {minutes} : {seconds}</strong>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport './Enter.css';\r\nimport {config} from \"../../Config\";\r\n\r\n/* Модальное окно */\r\nconst modal = document.getElementById('id01');\r\nwindow.onclick = function(event) {\r\n    if (event.target === modal) {\r\n        modal.style.display = \"none\";\r\n    }\r\n};\r\n\r\nconst EnterPage = ({ logIn }) => {\r\n    const [userName, setName] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch('/api/users',{\r\n            method:'post',\r\n            headers:{ ...config.defaultHeaders },\r\n            body: JSON.stringify({name: userName})\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log(`login for ${userName} is successful`);\r\n                logIn(userName);\r\n        } else if (res.status === 400) {\r\n            throw new Error(\"Польователь с таким именем уже существует\")\r\n        } else {\r\n            throw new Error(res.statusText);\r\n        }\r\n        }).catch(e => alert(e));\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => document.getElementById('id01').style.display='block'}\r\n                    className=\"ENT\">Играть &laquo;Морской Бой&raquo;</button>\r\n\r\n            <div id=\"id01\" className=\"modal\">\r\n                <form className=\"modal-content animate\" onSubmit={handleSubmit}>\r\n                    <div className=\"imgcontainer\">\r\n                        <span onClick={ () => document.getElementById('id01').style.display='none'}\r\n                              className=\"close\" title=\"Close Modal\">×</span>\r\n                        <img src=\"https://thumbs.gfycat.com/FrankFreeAmericankestrel-size_restricted.gif\"\r\n                             alt=\"Avatar\" className=\"avatar\" />\r\n                    </div>\r\n\r\n                    <div className=\"container\">\r\n                        <label htmlFor=\"uname\" style={{fontSize: \"2vh\"}}><b>Привет, я Smart, а ты...</b></label><br /><br />\r\n                        <input className='form-row' type=\"text\" placeholder=\"Введите имя\" name=\"uname\"\r\n                               autoComplete=\"off\" value={userName} onChange={e => setName(e.target.value)} required /><br /><br />\r\n                        <button type=\"submit\" className=\"button1\">ИГРАТЬ</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EnterPage;","import React, { Component } from 'react';\r\nimport _ from 'underscore';\r\nimport './Chat.css';\r\nimport { Input, Messages } from \"./../Routing\";\r\n\r\nfunction randomColor() {\r\n    return \"rgba(\" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", 0.8)\";\r\n}\r\n\r\nclass Chat extends Component {\r\n    state = {\r\n        messages: [],\r\n        member: {\r\n            username: 'name',\r\n            color: randomColor(),\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Chat\">\r\n                <div className=\"Chat-header\">\r\n                    <h1>Общий чат</h1>\r\n                </div>\r\n                <Messages\r\n                    messages={this.state.messages}\r\n                    currentMember={this.state.member}\r\n                />\r\n                <Input\r\n                    onSendMessage={this.onSendMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSendMessage = (message) => {\r\n        const messages = this.state.messages;\r\n        const member = this.state.member;\r\n        messages.push({member,text: message});\r\n        this.setState({messages});\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        text: \"\"\r\n    };\r\n\r\n    onChange(e) {\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onSendMessage(this.state.text);\r\n        this.setState({text:\"\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Input\">\r\n                <form onSubmit={e => this.onSubmit(e)} className=\"chat_form\">\r\n                    <input\r\n                        className=\"chat_input\"\r\n                        onChange={e => this.onChange(e)}\r\n                        value={this.state.text}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите сообщение\"\r\n                    />\r\n                    <button className=\"chat_button\">Отправить</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport _ from \"underscore\";\r\n\r\nfunction randomColor() {\r\n    return \"rgba(\" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", \" +\r\n        _.random(255) + \", 0.65)\";\r\n}\r\n\r\nclass Message extends Component {\r\n    render() {\r\n        const {messages} = this.props;\r\n        return (\r\n            <ul className=\"Messages-list\">\r\n                {messages.map(m => this.renderMessage(m))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    renderMessage(message) {\r\n        const {member, text} = message;\r\n        const {currentMember} = this.props;\r\n        const messageFromMe = member.id === currentMember.id;\r\n        const className = messageFromMe ?\r\n            \"Messages-message currentMember\" : \"Messages-message\";\r\n        return (\r\n            <li className={className}>\r\n                <div className=\"Message-content\">\r\n                    {\r\n                        !messageFromMe &&\r\n                        <div className=\"username\">\r\n                            { member.username}\r\n                        </div>\r\n                    }\r\n                    <div className=\"text\" style={{backgroundColor: currentMember.color}}>{text}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './Ships.css';\r\n\r\nconst Ships = ({ fleet, name, player }) => {\r\n    const justifyContent = `${player === 'AI' ? 'flex-start' : 'flex-end'}`;\r\n    return (\r\n        <div className=\"info_ships\">\r\n            <div className=\"name\" style={{justifyContent: justifyContent}}>\r\n                {name}\r\n            </div>\r\n            <div className=\"ships\">\r\n                {\r\n                    Object.entries(fleet).map(([ship, params], index) =>\r\n                        <div className=\"ships__same_type\" key={index}\r\n                            style={{justifyContent: justifyContent}}>\r\n                            {\r\n                                params.units.map((unit, unitIndex) => {\r\n                                    return (\r\n                                        <div className=\"ships__unit\" key={unitIndex}\r\n                                             style={{width: `${unit.length * 15}px`}}>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Ships;","import React, { useEffect, useState } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport { App, EnterPage } from './components/Routing';\r\nimport {config} from \"./Config\";\r\n\r\nconst Main = () => {\r\n    const [userName, enter] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch('/api/users', {\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                return res.json();\r\n            }\r\n            throw new Error(res.statusText);\r\n        }).then(data => {\r\n            console.log(data);\r\n            enter('blabla');\r\n        }).catch(e => console.log(`Ошибка: ${e.message}`));\r\n    }, []);\r\n\r\n    const logIn = (name) => {\r\n        enter(name);\r\n    };\r\n\r\n    const logout = () => {\r\n        fetch('/api/users', {\r\n            method: 'delete',\r\n            headers: { ...config.defaultHeaders }\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                console.log(`logout for ${userName} is successful`);\r\n                enter('');\r\n            } else {\r\n                throw new Error(res.statusText);\r\n            }\r\n        }).catch(e => alert(e));\r\n    };\r\n\r\n    return(\r\n        userName ? <App logout={logout} userName={userName}/> : <EnterPage logIn={logIn}/>\r\n    );\r\n};\r\n\r\nrender(\r\n    <Main />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}